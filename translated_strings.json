{
  "./setup/cli/commands/backup.py": {
    "Backup operation implementation": "バックアップ操作の実装"
  },
  "./setup/cli/commands/install.py": {
    "\n    Collect API keys for servers that require them\n    \n    Args:\n        selected_servers: List of selected server keys\n        mcp_instance: MCP component instance\n        \n    Returns:\n        Dictionary of environment variable names to API key values\n    ": "\n    サーバーが必要とするAPIキーを収集します\n    \n    Args:\n        selected_servers: 選択されたサーバーキーのリスト\n        mcp_instance: MCPコンポーネントインスタンス\n        \n    Returns:\n        環境変数名とAPIキー値の辞書\n    ",
    " (requires API key)": " (APIキーが必要です)",
    "Determine which components to install": "インストールするコンポーネントを決定します",
    "Display installation plan": "インストール計画を表示します",
    "Execute installation operation with parsed arguments": "解析された引数でインストール操作を実行します",
    "Installation operation implementation": "インストール操作の実装",
    "No description": "説明なし",
    "No valid component instances created": "有効なコンポーネントインスタンスが作成されませんでした",
    "Perform the actual installation": "実際のインストールを実行します",
    "Register installation CLI arguments": "インストールCLI引数を登録します",
    "Run comprehensive system diagnostics": "包括的なシステム診断を実行します",
    "Stage 1: MCP Server Selection with API Key Collection": "ステージ1: MCPサーバーの選択とAPIキーの収集",
    "Stage 2: Framework Component Selection": "ステージ2: フレームワークコンポーネントの選択",
    "Two-stage interactive component selection": "2段階の対話型コンポーネント選択",
    "Validate system requirements": "システム要件を検証します",
    "mcp_docs - ": "mcp_docs - "
  },
  "./setup/cli/commands/update.py": {
    "\n    Collect API keys for servers that require them during update\n    \n    Args:\n        selected_servers: List of selected server keys\n        mcp_instance: MCP component instance\n        \n    Returns:\n        Dictionary of environment variable names to API key values\n    ": "\n    更新中にサーバーが必要とするAPIキーを収集します\n    \n    Args:\n        selected_servers: 選択されたサーバーキーのリスト\n        mcp_instance: MCPコンポーネントインスタンス\n        \n    Returns:\n        環境変数名とAPIキー値の辞書\n    ",
    "\nExamples:\n  SuperClaude update                       # Interactive update\n  SuperClaude update --check --verbose     # Check for updates (verbose)\n  SuperClaude update --components core mcp # Update specific components\n  SuperClaude update --backup --force      # Create backup before update (forced)\n        ": "\n例:\n  SuperClaude update                       # 対話的な更新\n  SuperClaude update --check --verbose     # 更新を確認 (詳細)\n  SuperClaude update --components core mcp # 特定のコンポーネントを更新\n  SuperClaude update --backup --force      # 更新前にバックアップを作成 (強制)\n        ",
    "\n[✗] Installation must be inside your user profile directory.": "\n[✗] インストールはユーザープロファイルディレクトリ内で行う必要があります。",
    "    Expected prefix: ": "    期待されるプレフィックス: ",
    "    Provided path:   ": "    指定されたパス:   ",
    " (reinstall)": " (再インストール)",
    " API keys for MCP server update": " MCPサーバー更新用のAPIキー",
    " components...": " コンポーネント...",
    " seconds": " 秒",
    "1. Restart your Claude Code session": "1. Claude Codeセッションを再起動してください",
    "2. Updated components are now available": "2. 更新されたコンポーネントが利用可能です",
    "3. Check for any breaking changes in documentation": "3. ドキュメントで破壊的変更がないか確認してください",
    "All components are up to date": "すべてのコンポーネントは最新です",
    "Available Updates:": "利用可能な更新:",
    "Available updates:": "利用可能な更新:",
    "Backup created: ": "バックアップ作成済み: ",
    "Cancel Update": "更新をキャンセル",
    "Check for available updates": "利用可能な更新を確認",
    "Check for available updates without installing": "インストールせずに利用可能な更新を確認",
    "Check if SuperClaude installation exists": "SuperClaudeのインストールが存在するか確認",
    "Checking for available updates...": "利用可能な更新を確認中...",
    "Collected ": "収集済み ",
    "Components not installed: ": "インストールされていないコンポーネント: ",
    "Components to update:": "更新するコンポーネント:",
    "Could not determine installed components": "インストールされているコンポーネントを特定できませんでした",
    "Create backup before update": "更新前にバックアップを作成",
    "Currently installed components:": "現在インストールされているコンポーネント:",
    "Determine which components to update": "更新するコンポーネントを決定",
    "Display update check results": "更新チェック結果を表示",
    "Display update plan": "更新計画を表示",
    "Execute update operation with parsed arguments": "解析された引数で更新操作を実行",
    "Failed ": "失敗 ",
    "Failed components: ": "失敗したコンポーネント: ",
    "Get currently installed components and their versions": "現在インストールされているコンポーネントとそのバージョンを取得",
    "Installation Directory:": "インストールディレクトリ:",
    "Interactive update selection": "対話的な更新の選択",
    "New MCP servers require API keys for full functionality:": "新しいMCPサーバーは全機能を利用するためにAPIキーが必要です:",
    "Next steps:": "次のステップ:",
    "No SuperClaude installation found": "SuperClaudeのインストールが見つかりません",
    "No components selected for update": "更新対象のコンポーネントが選択されていません",
    "No description": "説明なし",
    "No updates available": "利用可能な更新はありません",
    "No valid component instances created": "有効なコンポーネントインスタンスが作成されませんでした",
    "Perform the actual update": "実際の更新を実行",
    "Proceed with update?": "更新を続行しますか？",
    "Register update CLI arguments": "更新CLI引数を登録",
    "Reinstall components even if versions match": "バージョンが一致してもコンポーネントを再インストール",
    "Select Individual Components": "個別のコンポーネントを選択",
    "Select components to update:": "更新するコンポーネントを選択:",
    "Select update option:": "更新オプションを選択:",
    "Skip backup creation": "バックアップ作成をスキップ",
    "Specific components to update": "更新する特定のコンポーネント",
    "SuperClaude Update v": "SuperClaude 更新 v",
    "SuperClaude installation not found in ": "SuperClaudeのインストールが次の場所に見つかりません: ",
    "SuperClaude update completed successfully!": "SuperClaudeの更新が正常に完了しました！",
    "Unexpected error during update: ": "更新中に予期しないエラーが発生しました: ",
    "Update All Components": "すべてのコンポーネントを更新",
    "Update Check Results": "更新チェック結果",
    "Update Plan": "更新計画",
    "Update SuperClaude Framework components to latest versions": "SuperClaudeフレームワークコンポーネントを最新バージョンに更新",
    "Update cancelled by user": "ユーザーによって更新がキャンセルされました",
    "Update complete": "更新完了",
    "Update completed successfully in ": "更新は正常に完了しました: ",
    "Update completed with errors in ": "更新はエラーで完了しました: ",
    "Update existing SuperClaude installation": "既存のSuperClaudeインストールを更新",
    "Update failed. Check logs for details.": "更新に失敗しました。詳細はログを確認してください。",
    "Update operation implementation": "更新操作の実装",
    "Updated ": "更新済み ",
    "Updated components: ": "更新されたコンポーネント: ",
    "Updating ": "更新中 ",
    "Updating SuperClaude framework components": "SuperClaudeフレームワークコンポーネントを更新中",
    "Updating: ": "更新中: ",
    "Use 'SuperClaude install' to install SuperClaude first": "最初に 'SuperClaude install' を使用してSuperClaudeをインストールしてください",
    "═══ API Key Configuration ═══": "═══ APIキー設定 ═══"
  },
  "./setup/cli/base.py": {
    "\nSuperClaude CLI Base Module\n\nBase class for all CLI operations providing common functionality\n": "\nSuperClaude CLI ベースモジュール\n\nすべてのCLI操作に共通機能を提供する基底クラス\n",
    " operation": " 操作",
    " operation: ": " 操作: ",
    "Backup and restore SuperClaude installations": "SuperClaudeのインストールをバックアップおよび復元します",
    "Base class for all operations providing common functionality": "すべての操作に共通機能を提供する基底クラス",
    "Cannot specify both --verbose and --quiet": "--verboseと--quietは同時に指定できません",
    "Error in ": "エラー: ",
    "Get information about available commands": "利用可能なコマンドに関する情報を取得します",
    "Install SuperClaude framework components": "SuperClaudeフレームワークコンポーネントをインストールします",
    "Remove SuperClaude framework installation": "SuperClaudeフレームワークのインストールを削除します",
    "Setup operation-specific logging": "操作固有のロギングを設定します",
    "Standard error handling for operations": "操作の標準エラー処理",
    "Starting ": "開始中 ",
    "Update existing SuperClaude installation": "既存のSuperClaudeインストールを更新します",
    "Validate global arguments common to all operations": "すべての操作に共通のグローバル引数を検証します"
  },
  "./setup/core/validator.py": {
    "\n        Check Claude CLI installation and version\n        \n        Args:\n            min_version: Minimum required Claude CLI version (optional)\n            \n        Returns:\n            Tuple of (success: bool, message: str)\n        ": "\n        Claude CLIのインストールとバージョンを確認します\n        \n        Args:\n            min_version: 必須の最小Claude CLIバージョン（オプション）\n            \n        Returns:\n            (成功: bool, メッセージ: str)のタプル\n        ",
    "\n        Check Python version requirements\n        \n        Args:\n            min_version: Minimum required Python version\n            max_version: Maximum supported Python version (optional)\n            \n        Returns:\n            Tuple of (success: bool, message: str)\n        ": "\n        Pythonのバージョン要件を確認します\n        \n        Args:\n            min_version: 必須の最小Pythonバージョン\n            max_version: サポートされる最大Pythonバージョン（オプション）\n            \n        Returns:\n            (成功: bool, メッセージ: str)のタプル\n        ",
    "\n        Check available disk space\n        \n        Args:\n            path: Path to check (file or directory)\n            required_mb: Required free space in MB\n            \n        Returns:\n            Tuple of (success: bool, message: str)\n        ": "\n        利用可能なディスク容量を確認します\n        \n        Args:\n            path: 確認するパス（ファイルまたはディレクトリ）\n            required_mb: 必要な空き容量（MB）\n            \n        Returns:\n            (成功: bool, メッセージ: str)のタプル\n        ",
    "\n        Check external tool availability and version\n        \n        Args:\n            tool_name: Display name of tool\n            command: Command to check version\n            min_version: Minimum required version (optional)\n            \n        Returns:\n            Tuple of (success: bool, message: str)\n        ": "\n        外部ツールの利用可能性とバージョンを確認します\n        \n        Args:\n            tool_name: ツールの表示名\n            command: バージョンを確認するコマンド\n            min_version: 必須の最小バージョン（オプション）\n            \n        Returns:\n            (成功: bool, メッセージ: str)のタプル\n        ",
    "\n        Check write permissions for path\n        \n        Args:\n            path: Path to check\n            \n        Returns:\n            Tuple of (success: bool, message: str)\n        ": "\n        パスの書き込み権限を確認します\n        \n        Args:\n            path: 確認するパス\n            \n        Returns:\n            (成功: bool, メッセージ: str)のタプル\n        ",
    "\n        Get comprehensive system information\n        \n        Returns:\n            Dict with system information\n        ": "\n        包括的なシステム情報を取得します\n        \n        Returns:\n            システム情報を含む辞書\n        ",
    "\n        Get current platform for installation commands\n        \n        Returns:\n            Platform string (linux, darwin, win32)\n        ": "\n        インストールコマンド用の現在のプラットフォームを取得します\n        \n        Returns:\n            プラットフォーム文字列 (linux, darwin, win32)\n        ",
    "\n        Get installation help for a specific tool\n        \n        Args:\n            tool_name: Name of tool to get help for\n            platform: Target platform (auto-detected if None)\n            \n        Returns:\n            Installation help string\n        ": "\n        特定のツールのインストールヘルプを取得します\n        \n        Args:\n            tool_name: ヘルプを取得するツールの名前\n            platform: ターゲットプラットフォーム（Noneの場合は自動検出）\n            \n        Returns:\n            インストールヘルプ文字列\n        ",
    "\n        Load installation commands from requirements configuration\n        \n        Returns:\n            Installation commands dict\n        ": "\n        要件設定からインストールコマンドを読み込みます\n        \n        Returns:\n            インストールコマンドの辞書\n        ",
    "\n        Perform comprehensive system diagnostics\n        \n        Returns:\n            Diagnostic information dict\n        ": "\n        包括的なシステム診断を実行します\n        \n        Returns:\n            診断情報の辞書\n        ",
    "\n        Validate all system requirements\n        \n        Args:\n            requirements: Requirements configuration dict\n            \n        Returns:\n            Tuple of (all_passed: bool, error_messages: List[str])\n        ": "\n        すべてのシステム要件を検証します\n        \n        Args:\n            requirements: 要件設定の辞書\n            \n        Returns:\n            (すべて合格: bool, エラーメッセージ: List[str])のタプル\n        ",
    "\n        Validate requirements for specific components\n        \n        Args:\n            component_names: List of component names to validate\n            all_requirements: Full requirements configuration\n            \n        Returns:\n            Tuple of (all_passed: bool, error_messages: List[str])\n        ": "\n        特定のコンポーネントの要件を検証します\n        \n        Args:\n            component_names: 検証するコンポーネント名のリスト\n            all_requirements: 完全な要件設定\n            \n        Returns:\n            (すべて合格: bool, エラーメッセージ: List[str])のタプル\n        ",
    "\nSystem validation for SuperClaude installation requirements\n": "\nSuperClaudeインストール要件のシステム検証\n",
    "\n💡 Installation Help for ": "\n💡 インストールヘルプ: ",
    "\n💡 PATH Issue Help:\n   Some tools may not be in your PATH. Try:\n   - Restart your terminal after installation\n   - Check your shell configuration (.bashrc, .zshrc)\n   - Use full paths to tools if needed\n": "\n💡 PATHの問題に関するヘルプ:\n   一部のツールがPATHにない可能性があります。試してみてください:\n   - インストール後にターミナルを再起動する\n   - シェルの設定を確認する (.bashrc, .zshrc)\n   - 必要に応じてツールへのフルパスを使用する\n",
    "   Command: ": "   コマンド: ",
    " check timed out": " のチェックがタイムアウトしました",
    " exceeds maximum supported ": " はサポートされている最大値を超えています ",
    " found": " が見つかりました",
    " found (version unknown)": " が見つかりました (バージョン不明)",
    " meets requirements": " は要件を満たしています",
    " not found in PATH": " がPATHに見つかりません",
    " not found or command failed": " が見つからないか、コマンドが失敗しました",
    "+ required, found ": "+ が必要、見つかったのは ",
    "Add PATH-related diagnostics": "PATH関連の診断を追加",
    "Claude CLI": "Claude CLI",
    "Claude CLI ": "Claude CLI ",
    "Claude CLI found (version format unknown)": "Claude CLIが見つかりました (バージョン形式不明)",
    "Claude CLI not found": "Claude CLIが見つかりません",
    "Claude CLI not found in PATH": "Claude CLIがPATHに見つかりません",
    "Claude CLI version check timed out": "Claude CLIのバージョンチェックがタイムアウトしました",
    "Clear validation cache": "検証キャッシュをクリア",
    "Could not check ": "確認できませんでした ",
    "Could not check Claude CLI: ": "Claude CLIを確認できませんでした: ",
    "Could not check Python version: ": "Pythonのバージョンを確認できませんでした: ",
    "Could not check disk space: ": "ディスク容量を確認できませんでした: ",
    "Could not determine disk space": "ディスク容量を特定できませんでした",
    "Disk space: ": "ディスク容量: ",
    "Initialize validator": "バリデーターを初期化",
    "Insufficient disk space": "ディスク容量が不足しています",
    "Insufficient disk space: ": "ディスク容量が不足しています: ",
    "MB free": "MBの空き",
    "MB free, ": "MBの空き, ",
    "MB required": "MBが必要",
    "No installation instructions available for ": "利用可能なインストール手順はありません: ",
    "No write access to ": "書き込みアクセス権がありません: ",
    "Python ": "Python ",
    "Python (python3 or python)": "Python (python3 または python)",
    "Python version ": "Pythonバージョン ",
    "Python version issue": "Pythonバージョンの問題",
    "Python: ": "Python: ",
    "Sufficient disk space: ": "十分なディスク容量: ",
    "System requirements validator": "システム要件バリデーター",
    "Write access confirmed for ": "書き込みアクセス権が確認されました: "
  },
  "./setup/core/installer.py": {
    "\n        Create backup of existing installation\n        \n        Returns:\n            Path to backup archive or None if no existing installation\n        ": "\n        既存のインストールのバックアップを作成します\n        \n        Returns:\n            バックアップアーカイブへのパス、または既存のインストールがない場合はNone\n        ",
    "\n        Get summary of installation results\n\n        Returns:\n            Dict with installation statistics and results\n        ": "\n        インストール結果の概要を取得します\n\n        Returns:\n            インストールの統計と結果を含む辞書\n        ",
    "\n        Initialize installer\n        \n        Args:\n            install_dir: Target installation directory\n            dry_run: If True, only simulate installation\n        ": "\n        インストーラーを初期化します\n        \n        Args:\n            install_dir: ターゲットインストールディレクトリ\n            dry_run: Trueの場合、インストールをシミュレートするだけです\n        ",
    "\n        Install a single component\n        \n        Args:\n            component_name: Name of component to install\n            config: Installation configuration\n            \n        Returns:\n            True if successful, False otherwise\n        ": "\n        単一のコンポーネントをインストールします\n        \n        Args:\n            component_name: インストールするコンポーネントの名前\n            config: インストール設定\n            \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\n        Install multiple components in dependency order\n        \n        Args:\n            component_names: List of component names to install\n            config: Installation configuration\n            \n        Returns:\n            True if all successful, False if any failed\n        ": "\n        依存関係の順序で複数のコンポーネントをインストールします\n        \n        Args:\n            component_names: インストールするコンポーネント名のリスト\n            config: インストール設定\n            \n        Returns:\n            すべて成功した場合はTrue、いずれかが失敗した場合はFalse\n        ",
    "\n        Register a component for installation\n        \n        Args:\n            component: Component instance to register\n        ": "\n        インストール用のコンポーネントを登録します\n        \n        Args:\n            component: 登録するコンポーネントインスタンス\n        ",
    "\n        Register multiple components\n        \n        Args:\n            components: List of component instances\n        ": "\n        複数のコンポーネントを登録します\n        \n        Args:\n            components: コンポーネントインスタンスのリスト\n        ",
    "\n        Resolve component dependencies in correct installation order\n        \n        Args:\n            component_names: List of component names to install\n            \n        Returns:\n            Ordered list of component names including dependencies\n            \n        Raises:\n            ValueError: If circular dependencies detected or unknown component\n        ": "\n        正しいインストール順序でコンポーネントの依存関係を解決します\n        \n        Args:\n            component_names: インストールするコンポーネント名のリスト\n            \n        Returns:\n            依存関係を含む、順序付けされたコンポーネント名のリスト\n            \n        Raises:\n            ValueError: 循環依存が検出されたか、不明なコンポーネントがある場合\n        ",
    "\n        Validate system requirements for all registered components\n        \n        Returns:\n            Tuple of (success: bool, error_messages: List[str])\n        ": "\n        登録されているすべてのコンポーネントのシステム要件を検証します\n        \n        Returns:\n            (成功: bool, エラーメッセージ: List[str])のタプル\n        ",
    "\nBase installer logic for SuperClaude installation system fixed some issues\n": "\nSuperClaudeインストールシステムの基本インストーラーロジック いくつかの問題を修正\n",
    "Alias for update operation (uses install logic)": "更新操作のエイリアス（インストールロジックを使用）",
    "Main installer orchestrator": "メインインストーラーオーケストレーター",
    "Run post-installation validation for all installed components": "インストールされたすべてのコンポーネントに対してインストール後の検証を実行",
    "Unknown component: ": "不明なコンポーネント: "
  },
  "./setup/core/base.py": {
    "\n        Check if component is installed\n        \n        Returns:\n            True if installed, False otherwise\n        ": "\n        コンポーネントがインストールされているか確認します\n        \n        Returns:\n            インストールされている場合はTrue、それ以外はFalse\n        ",
    "\n        Check prerequisites for this component\n        \n        Returns:\n            Tuple of (success: bool, error_messages: List[str])\n        ": "\n        このコンポーネントの前提条件を確認します\n        \n        Returns:\n            (成功: bool, エラーメッセージ: List[str])のタプル\n        ",
    "\n        Dynamically discover framework .md files in the Core directory\n\n        Returns:\n            List of framework filenames (e.g., ['CLAUDE.md', 'COMMANDS.md', ...])\n        ": "\n        Coreディレクトリ内のフレームワーク.mdファイルを動的に検出します\n\n        Returns:\n            フレームワークファイル名のリスト (例: ['CLAUDE.md', 'COMMANDS.md', ...])\n        ",
    "\n        Estimate installed size in bytes\n        \n        Returns:\n            Estimated size in bytes\n        ": "\n        インストールサイズをバイト単位で推定します\n        \n        Returns:\n            推定サイズ（バイト）\n        ",
    "\n        Get currently installed version of component\n        \n        Returns:\n            Version string if installed, None otherwise\n        ": "\n        現在インストールされているコンポーネントのバージョンを取得します\n        \n        Returns:\n            インストールされている場合はバージョン文字列、それ以外はNone\n        ",
    "\n        Perform component-specific installation logic\n        \n        Args:\n            config: Installation configuration\n            \n        Returns:\n            True if successful, False otherwise\n        ": "\n        コンポーネント固有のインストールロジックを実行します\n        \n        Args:\n            config: インストール設定\n            \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\n        Remove component\n        \n        Returns:\n            True if successful, False otherwise\n        ": "\n        コンポーネントを削除します\n        \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\n        Return component metadata\n        \n        Returns:\n            Dict containing:\n                - name: Component name\n                - version: Component version\n                - description: Component description\n                - category: Component category (core, command, integration, etc.)\n        ": "\n        コンポーネントのメタデータを返します\n        \n        Returns:\n            以下を含む辞書:\n                - name: コンポーネント名\n                - version: コンポーネントバージョン\n                - description: コンポーネントの説明\n                - category: コンポーネントカテゴリ (core, command, integration, etc.)\n        ",
    "\n        Return list of component dependencies\n        \n        Returns:\n            List of component names this component depends on\n        ": "\n        コンポーネントの依存関係リストを返します\n        \n        Returns:\n            このコンポーネントが依存するコンポーネント名のリスト\n        ",
    "\n        Return list of files to install\n        \n        Returns:\n            List of tuples (source_path, target_path)\n        ": "\n        インストールするファイルのリストを返します\n        \n        Returns:\n            (ソースパス, ターゲットパス)のタプルのリスト\n        ",
    "\n        Safely resolve path with proper error handling and security validation\n        \n        Args:\n            path: Path to resolve\n            \n        Returns:\n            Resolved path\n            \n        Raises:\n            ValueError: If path resolution fails or path is unsafe\n        ": "\n        適切なエラー処理とセキュリティ検証で安全にパスを解決します\n        \n        Args:\n            path: 解決するパス\n            \n        Returns:\n            解決されたパス\n            \n        Raises:\n            ValueError: パスの解決に失敗した場合、またはパスが安全でない場合\n        ",
    "\n        Safely resolve source path with existence check\n        \n        Args:\n            path: Source path to resolve\n            \n        Returns:\n            Resolved path if valid and exists, None otherwise\n        ": "\n        存在チェック付きで安全にソースパスを解決します\n        \n        Args:\n            path: 解決するソースパス\n            \n        Returns:\n            有効で存在する場合は解決されたパス、それ以外はNone\n        ",
    "\n        Shared utility for discovering files in a directory\n\n        Args:\n            directory: Directory to scan\n            extension: File extension to look for (default: '.md')\n            exclude_patterns: List of filename patterns to exclude\n\n        Returns:\n            List of filenames found in the directory\n        ": "\n        ディレクトリ内のファイルを検出するための共有ユーティリティ\n\n        Args:\n            directory: スキャンするディレクトリ\n            extension: 検索するファイル拡張子 (デフォルト: '.md')\n            exclude_patterns: 除外するファイル名パターンのリスト\n\n        Returns:\n            ディレクトリ内で見つかったファイル名のリスト\n        ",
    "\n        Update component (default: uninstall then install)\n        \n        Args:\n            config: Installation configuration\n            \n        Returns:\n            True if successful, False otherwise\n        ": "\n        コンポーネントを更新します (デフォルト: アンインストールしてからインストール)\n        \n        Args:\n            config: インストール設定\n            \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\n        Validate that component is correctly installed\n        \n        Returns:\n            Tuple of (success: bool, error_messages: List[str])\n        ": "\n        コンポーネントが正しくインストールされていることを検証します\n        \n        Returns:\n            (成功: bool, エラーメッセージ: List[str])のタプル\n        ",
    "\nAbstract base class for installable components\n": "\nインストール可能なコンポーネントの抽象基底クラス\n",
    "Base class for all installable components": "すべてのインストール可能なコンポーネントの基底クラス",
    "Checking installed version": "インストール済みバージョンの確認",
    "Developer representation of component": "コンポーネントの開発者向け表現",
    "Get source directory for component files": "コンポーネントファイルのソースディレクトリを取得",
    "Metadata file exists, reading version": "メタデータファイルが存在するため、バージョンを読み取り中",
    "String representation of component": "コンポーネントの文字列表現"
  },
  "./setup/core/registry.py": {
    "\n        Auto-discover all component classes in components directory\n        \n        Args:\n            force_reload: Force rediscovery even if already done\n        ": "\n        componentsディレクトリ内のすべてのコンポーネントクラスを自動検出します\n        \n        Args:\n            force_reload: 既に実行済みでも再検出を強制します\n        ",
    "\n        Create instances for multiple components\n        \n        Args:\n            component_names: List of component names\n            install_dir: Installation directory for instances\n            \n        Returns:\n            Dict mapping component names to instances\n        ": "\n        複数のコンポーネントのインスタンスを作成します\n        \n        Args:\n            component_names: コンポーネント名のリスト\n            install_dir: インスタンスのインストールディレクトリ\n            \n        Returns:\n            コンポーネント名とインスタンスをマッピングする辞書\n        ",
    "\n        Get component class by name\n        \n        Args:\n            component_name: Name of component\n            \n        Returns:\n            Component class or None if not found\n        ": "\n        名前でコンポーネントクラスを取得します\n        \n        Args:\n            component_name: コンポーネント名\n            \n        Returns:\n            コンポーネントクラス、見つからない場合はNone\n        ",
    "\n        Get component instance by name\n        \n        Args:\n            component_name: Name of component\n            install_dir: Installation directory (creates new instance with this dir)\n            \n        Returns:\n            Component instance or None if not found\n        ": "\n        名前でコンポーネントインスタンスを取得します\n        \n        Args:\n            component_name: コンポーネント名\n            install_dir: インストールディレクトリ（このディレクトリで新しいインスタンスを作成）\n            \n        Returns:\n            コンポーネントインスタンス、見つからない場合はNone\n        ",
    "\n        Get components filtered by category\n        \n        Args:\n            category: Component category to filter by\n            \n        Returns:\n            List of component names in the category\n        ": "\n        カテゴリでフィルタリングされたコンポーネントを取得します\n        \n        Args:\n            category: フィルタリングするコンポーネントカテゴリ\n            \n        Returns:\n            カテゴリ内のコンポーネント名のリスト\n        ",
    "\n        Get components that depend on the given component\n        \n        Args:\n            component_name: Name of component\n            \n        Returns:\n            Set of component names that depend on this component\n        ": "\n        指定されたコンポーネントに依存するコンポーネントを取得します\n        \n        Args:\n            component_name: コンポーネント名\n            \n        Returns:\n            このコンポーネントに依存するコンポーネント名のセット\n        ",
    "\n        Get comprehensive registry information\n        \n        Returns:\n            Dict with registry statistics and component info\n        ": "\n        包括的なレジストリ情報を取得します\n        \n        Returns:\n            レジストリの統計とコンポーネント情報を含む辞書\n        ",
    "\n        Get direct dependencies for a component\n        \n        Args:\n            component_name: Name of component\n            \n        Returns:\n            Set of dependency component names\n        ": "\n        コンポーネントの直接の依存関係を取得します\n        \n        Args:\n            component_name: コンポーネント名\n            \n        Returns:\n            依存コンポーネント名のセット\n        ",
    "\n        Get installation order grouped by dependency levels\n        \n        Args:\n            component_names: List of component names to install\n            \n        Returns:\n            List of lists, where each inner list contains components\n            that can be installed in parallel at that dependency level\n        ": "\n        依存関係レベルでグループ化されたインストール順序を取得します\n        \n        Args:\n            component_names: インストールするコンポーネント名のリスト\n            \n        Returns:\n            リストのリスト。各内部リストには、その依存関係レベルで並行してインストールできるコンポーネントが含まれます\n        ",
    "\n        Get list of all discovered component names\n        \n        Returns:\n            List of component names\n        ": "\n        検出されたすべてのコンポーネント名のリストを取得します\n        \n        Returns:\n            コンポーネント名のリスト\n        ",
    "\n        Get metadata for a component\n        \n        Args:\n            component_name: Name of component\n            \n        Returns:\n            Component metadata dict or None if not found\n        ": "\n        コンポーネントのメタデータを取得します\n        \n        Args:\n            component_name: コンポーネント名\n            \n        Returns:\n            コンポーネントのメタデータ辞書、見つからない場合はNone\n        ",
    "\n        Initialize component registry\n        \n        Args:\n            components_dir: Directory containing component modules\n        ": "\n        コンポーネントレジストリを初期化します\n        \n        Args:\n            components_dir: コンポーネントモジュールを含むディレクトリ\n        ",
    "\n        Load component classes from a module\n        \n        Args:\n            module_name: Name of module to load\n        ": "\n        モジュールからコンポーネントクラスを読み込みます\n        \n        Args:\n            module_name: 読み込むモジュールの名前\n        ",
    "\n        Resolve component dependencies in correct installation order\n        \n        Args:\n            component_names: List of component names to install\n            \n        Returns:\n            Ordered list of component names including dependencies\n            \n        Raises:\n            ValueError: If circular dependencies detected or unknown component\n        ": "\n        正しいインストール順序でコンポーネントの依存関係を解決します\n        \n        Args:\n            component_names: インストールするコンポーネント名のリスト\n            \n        Returns:\n            依存関係を含む、順序付けされたコンポーネント名のリスト\n            \n        Raises:\n            ValueError: 循環依存が検出されたか、不明なコンポーネントがある場合\n        ",
    "\n        Validate dependency graph for cycles and missing dependencies\n        \n        Returns:\n            List of validation errors (empty if valid)\n        ": "\n        依存関係グラフの循環と欠落している依存関係を検証します\n        \n        Returns:\n            検証エラーのリスト（有効な場合は空）\n        ",
    "\nComponent registry for auto-discovery and dependency resolution\n": "\n自動検出と依存関係解決のためのコンポーネントレジストリ\n",
    " has missing dependencies: ": " には不足している依存関係があります: ",
    "Auto-discovery and management of installable components": "インストール可能なコンポーネントの自動検出と管理",
    "Build dependency graph for all discovered components": "検出されたすべてのコンポーネントの依存関係グラフを構築",
    "Circular dependency detected in installation order calculation": "インストール順序の計算で循環依存が検出されました",
    "Circular dependency detected involving ": "循環依存が検出されました: ",
    "Component ": "コンポーネント ",
    "Could not create instance for component ": "コンポーネントのインスタンスを作成できませんでした ",
    "Could not get dependencies for ": "依存関係を取得できませんでした: ",
    "Could not instantiate component ": "コンポーネントをインスタンス化できませんでした ",
    "Could not load component module ": "コンポーネントモジュールを読み込めませんでした ",
    "Error creating component instance ": "コンポーネントインスタンスの作成エラー ",
    "Unknown component: ": "不明なコンポーネント: "
  },
  "./setup/utils/ui.py": {
    "\n        Complete progress bar\n        \n        Args:\n            message: Completion message\n        ": "\n        プログレスバーを完了します\n        \n        Args:\n            message: 完了メッセージ\n        ",
    "\n        Display menu and get user selection\n        \n        Returns:\n            Selected option index (single) or list of indices (multi-select)\n        ": "\n        メニューを表示してユーザーの選択を取得します\n        \n        Returns:\n            選択されたオプションのインデックス（単一）またはインデックスのリスト（複数選択）\n        ",
    "\n        Increment progress by 1\n        \n        Args:\n            message: Optional message to display\n        ": "\n        進行状況を1つインクリメントします\n        \n        Args:\n            message: 表示するオプションのメッセージ\n        ",
    "\n        Initialize menu\n        \n        Args:\n            title: Menu title\n            options: List of menu options\n            multi_select: Allow multiple selections\n        ": "\n        メニューを初期化します\n        \n        Args:\n            title: メニューのタイトル\n            options: メニューオプションのリスト\n            multi_select: 複数選択を許可\n        ",
    "\n        Initialize progress bar\n        \n        Args:\n            total: Total number of items to process\n            width: Width of progress bar in characters\n            prefix: Text to display before progress bar\n            suffix: Text to display after progress bar\n        ": "\n        プログレスバーを初期化します\n        \n        Args:\n            total: 処理するアイテムの総数\n            width: プログレスバーの幅（文字数）\n            prefix: プログレスバーの前に表示するテキスト\n            suffix: プログレスバーの後に表示するテキスト\n        ",
    "\n        Initialize spinner\n        \n        Args:\n            message: Message to display with spinner\n        ": "\n        スピナーを初期化します\n        \n        Args:\n            message: スピナーと共に表示するメッセージ\n        ",
    "\n        Stop spinner\n        \n        Args:\n            final_message: Final message to display\n        ": "\n        スピナーを停止します\n        \n        Args:\n            final_message: 最後に表示するメッセージ\n        ",
    "\n        Update progress bar\n        \n        Args:\n            current: Current progress value\n            message: Optional message to display\n        ": "\n        プログレスバーを更新します\n        \n        Args:\n            current: 現在の進行状況の値\n            message: 表示するオプションのメッセージ\n        ",
    "\n    Ask for user confirmation\n    \n    Args:\n        message: Confirmation message\n        default: Default response if user just presses Enter\n        \n    Returns:\n        True if confirmed, False otherwise\n    ": "\n    ユーザーに確認を求めます\n    \n    Args:\n        message: 確認メッセージ\n        default: ユーザーがEnterキーのみを押した場合のデフォルトの応答\n        \n    Returns:\n        確認された場合はTrue、それ以外はFalse\n    ",
    "\n    Display data in table format\n    \n    Args:\n        headers: Column headers\n        rows: Data rows\n        title: Optional table title\n    ": "\n    データをテーブル形式で表示します\n    \n    Args:\n        headers: 列ヘッダー\n        rows: データ行\n        title: オプションのテーブルタイトル\n    ",
    "\n    Display formatted header\n    \n    Args:\n        title: Main title\n        subtitle: Optional subtitle\n    ": "\n    フォーマットされたヘッダーを表示します\n    \n    Args:\n            title: メインタイトル\n            subtitle: オプションのサブタイトル\n    ",
    "\n    Prompt for API key with security and UX best practices\n    \n    Args:\n        service_name: Human-readable service name (e.g., \"Magic\", \"Morphllm\")\n        env_var_name: Environment variable name (e.g., \"TWENTYFIRST_API_KEY\")\n        \n    Returns:\n        API key string if provided, None if skipped\n    ": "\n    セキュリティとUXのベストプラクティスを用いてAPIキーの入力を促します\n    \n    Args:\n        service_name: 人間が読めるサービス名 (例: \"Magic\", \"Morphllm\")\n        env_var_name: 環境変数名 (例: \"TWENTYFIRST_API_KEY\")\n        \n    Returns:\n        提供された場合はAPIキー文字列、スキップされた場合はNone\n    ",
    "\nUser interface utilities for SuperClaude installation system\nCross-platform console UI with colors and progress indication\n": "\nSuperClaudeインストールシステム用のユーザーインターフェースユーティリティ\n色と進捗表示を備えたクロスプラットフォームのコンソールUI\n",
    " - set manually later": " - 後で手動で設定",
    " configured": " 設定済み",
    " requires: ": " が必要です: ",
    "Clear terminal screen": "ターミナル画面をクリア",
    "Color constants for console output": "コンソール出力用の色定数",
    "Cross-platform progress bar with customizable display": "カスタマイズ可能な表示を備えたクロスプラットフォームのプログレスバー",
    "Display error message": "エラーメッセージを表示",
    "Display info message": "情報メッセージを表示",
    "Display step progress": "ステップの進捗を表示",
    "Display success message": "成功メッセージを表示",
    "Display warning message": "警告メッセージを表示",
    "Enter ": "入力 ",
    "Enter numbers separated by commas (e.g., 1,3,5) or 'all' for all options:": "カンマで区切られた数字（例: 1,3,5）またはすべてのオプションに対して'all'を入力してください:",
    "Enter your choice (1-": "選択を入力してください (1-",
    "Format duration in human-readable format": "期間を人間が読める形式にフォーマット",
    "Format file size in human-readable format": "ファイルサイズを人間が読める形式にフォーマット",
    "Format time duration as human-readable string": "時間の長さを人間が読める文字列としてフォーマット",
    "Interactive menu system with keyboard navigation": "キーボードナビゲーション付きの対話型メニューシステム",
    "Invalid choice. Please enter a number between 1 and ": "無効な選択です。1から...の間の数字を入力してください ",
    "Invalid input: ": "無効な入力: ",
    "Invalid option: ": "無効なオプション: ",
    "Operation cancelled.": "操作がキャンセルされました。",
    "Please enter 'y' or 'n' (or press Enter for default).": "'y'または'n'を入力してください（またはデフォルトの場合はEnterキーを押してください）。",
    "Please enter a valid number.": "有効な数値を入力してください。",
    "Press Enter to continue...": "続行するにはEnterキーを押してください...",
    "Press Enter to skip (you can set this manually later)": "スキップするにはEnterキーを押してください（後で手動で設定できます）",
    "Simple status spinner for long operations": "長時間の操作用のシンプルなステータスピナー",
    "Start spinner in background thread": "バックグラウンドスレッドでスピナーを開始",
    "Truncate text to maximum length with optional suffix": "オプションの接尾辞付きでテキストを最大長に切り詰める",
    "Visit the service documentation to obtain your API key": "APIキーを取得するには、サービスのドキュメントにアクセスしてください",
    "Wait for user to press a key": "ユーザーがキーを押すのを待つ"
  },
  "./setup/utils/updater.py": {
    "\n        Compare current version with latest version\n        \n        Args:\n            latest: Latest version string\n            \n        Returns:\n            True if update is available\n        ": "\n        現在のバージョンと最新バージョンを比較します\n        \n        Args:\n            latest: 最新のバージョン文字列\n            \n        Returns:\n            更新が利用可能な場合はTrue\n        ",
    "\n        Detect how SuperClaude was installed (pip, pipx, etc.)\n        \n        Returns:\n            Installation method string\n        ": "\n        SuperClaudeがどのようにインストールされたか（pip, pipxなど）を検出します\n        \n        Returns:\n            インストール方法の文字列\n        ",
    "\n        Determine if we should check for updates based on last check time\n        \n        Args:\n            force: Force check regardless of last check time\n            \n        Returns:\n            True if update check should be performed\n        ": "\n        最終チェック時間に基づいて更新を確認すべきかどうかを判断します\n        \n        Args:\n            force: 最終チェック時間に関係なくチェックを強制\n            \n        Returns:\n            更新チェックを実行すべき場合はTrue\n        ",
    "\n        Display update available banner\n        \n        Args:\n            latest: Latest version available\n            auto_update: Whether to auto-update without prompting\n            \n        Returns:\n            True if user wants to update\n        ": "\n        利用可能な更新のバナーを表示します\n        \n        Args:\n            latest: 利用可能な最新バージョン\n            auto_update: プロンプトなしで自動更新するかどうか\n            \n        Returns:\n            ユーザーが更新を希望する場合はTrue\n        ",
    "\n        Execute the update command\n        \n        Returns:\n            True if update succeeded\n        ": "\n        更新コマンドを実行します\n        \n        Returns:\n            更新が成功した場合はTrue\n        ",
    "\n        Get the appropriate update command based on installation method\n        \n        Returns:\n            Update command string\n        ": "\n        インストール方法に基づいて適切な更新コマンドを取得します\n        \n        Returns:\n            更新コマンド文字列\n        ",
    "\n        Initialize update checker\n        \n        Args:\n            current_version: Current installed version\n        ": "\n        更新チェッカーを初期化します\n        \n        Args:\n            current_version: 現在インストールされているバージョン\n        ",
    "\n        Main method to check for updates and notify user\n        \n        Args:\n            force: Force check regardless of last check time\n            auto_update: Automatically update if available\n            \n        Returns:\n            True if update was performed\n        ": "\n        更新を確認してユーザーに通知するメインメソッド\n        \n        Args:\n            force: 最終チェック時間に関係なくチェックを強制\n            auto_update: 利用可能な場合は自動的に更新\n            \n        Returns:\n            更新が実行された場合はTrue\n        ",
    "\n        Query PyPI for the latest version of SuperClaude\n        \n        Returns:\n            Latest version string or None if check fails\n        ": "\n        PyPIにSuperClaudeの最新バージョンを問い合わせます\n        \n        Returns:\n            最新のバージョン文字列、またはチェックが失敗した場合はNone\n        ",
    "\n    Convenience function to check for updates\n    \n    Args:\n        current_version: Current installed version (defaults to reading from setup)\n        **kwargs: Additional arguments passed to check_and_notify\n        \n    Returns:\n        True if update was performed\n    ": "\n    更新を確認するための便利な関数\n    \n    Args:\n        current_version: 現在インストールされているバージョン（デフォルトはsetupから読み取り）\n        **kwargs: check_and_notifyに渡される追加の引数\n        \n    Returns:\n            更新が実行された場合はTrue\n    ",
    "\nAuto-update checker for SuperClaude Framework\nChecks PyPI for newer versions and offers automatic updates\n": "\nSuperClaudeフレームワークの自動更新チェッカー\nPyPIで新しいバージョンをチェックし、自動更新を提供します\n",
    "  Run: ": "  実行: ",
    "  🚀 Update Available: ": "  🚀 更新が利用可能です: ",
    "Could not auto-update: ": "自動更新できませんでした: ",
    "Failed to check PyPI: ": "PyPIのチェックに失敗しました: ",
    "Handles automatic update checking for SuperClaude": "SuperClaudeの自動更新チェックを処理します",
    "Latest PyPI version: ": "最新のPyPIバージョン: ",
    "Please restart SuperClaude to use the new version.": "新しいバージョンを使用するには、SuperClaudeを再起動してください。",
    "Please run manually: ": "手動で実行してください: ",
    "Save the current timestamp as last check time": "現在のタイムスタンプを最終チェック時間として保存",
    "Unexpected error checking updates: ": "更新の確認中に予期しないエラーが発生しました: ",
    "Update completed successfully!": "更新が正常に完了しました！",
    "Update failed. Please run manually:": "更新に失敗しました。手動で実行してください:",
    "pip install --upgrade --user SuperClaude": "pip install --upgrade --user SuperClaude",
    "pip install --upgrade SuperClaude": "pip install --upgrade SuperClaude",
    "pipx upgrade SuperClaude": "pipx upgrade SuperClaude",
    "🔄 Updating SuperClaude...": "🔄 SuperClaudeを更新中..."
  },
  "./setup/utils/security.py": {
    "\n        Check if path is a Windows junction point or symbolic link\n        \n        Args:\n            path: Path to check\n            \n        Returns:\n            True if path is a junction point or symlink, False otherwise\n        ": "\n        パスがWindowsのジャンクションポイントまたはシンボリックリンクであるかを確認します\n        \n        Args:\n            path: 確認するパス\n            \n        Returns:\n            パスがジャンクションポイントまたはシンボリックリンクの場合はTrue、それ以外はFalse\n        ",
    "\n        Create secure temporary directory\n        \n        Args:\n            prefix: Prefix for temp directory name\n            \n        Returns:\n            Path to secure temporary directory\n        ": "\n        安全な一時ディレクトリを作成します\n        \n        Args:\n            prefix: 一時ディレクトリ名のプレフィックス\n            \n        Returns:\n            安全な一時ディレクトリへのパス\n        ",
    "\n        Generate user-friendly error messages with actionable suggestions\n        \n        Args:\n            error_type: Type of error (traversal, windows_system, unix_system)\n            pattern: The regex pattern that matched\n            path: The path that caused the error\n            \n        Returns:\n            User-friendly error message with suggestions\n        ": "\n        実行可能な提案を含むユーザーフレンドリーなエラーメッセージを生成します\n        \n        Args:\n            error_type: エラーの種類 (traversal, windows_system, unix_system)\n            pattern: 一致した正規表現パターン\n            path: エラーを引き起こしたパス\n            \n        Returns:\n            提案付きのユーザーフレンドリーなエラーメッセージ\n        ",
    "\n        Log security validation decisions for audit trail\n        \n        Args:\n            action: Security action taken (ALLOW, DENY, WARN)\n            message: Description of the decision\n        ": "\n        監査証跡のためにセキュリティ検証の決定をログに記録します\n        \n        Args:\n            action: 実行されたセキュリティアクション (ALLOW, DENY, WARN)\n            message: 決定の説明\n        ",
    "\n        Normalize path for consistent validation across platforms\n        \n        Args:\n            path: Path to normalize\n            \n        Returns:\n            Normalized path string for validation\n        ": "\n        プラットフォーム間で一貫した検証のためにパスを正規化します\n        \n        Args:\n            path: 正規化するパス\n            \n        Returns:\n            検証用の正規化されたパス文字列\n        ",
    "\n        Sanitize filename by removing dangerous characters\n        \n        Args:\n            filename: Original filename\n            \n        Returns:\n            Sanitized filename\n        ": "\n        危険な文字を削除してファイル名をサニタイズします\n        \n        Args:\n            filename: 元のファイル名\n            \n        Returns:\n            サニタイズされたファイル名\n        ",
    "\n        Sanitize user input\n        \n        Args:\n            user_input: Raw user input\n            max_length: Maximum allowed length\n            \n        Returns:\n            Sanitized input\n        ": "\n        ユーザー入力をサニタイズします\n        \n        Args:\n            user_input: 生のユーザー入力\n            max_length: 許可される最大長\n            \n        Returns:\n            サニタイズされた入力\n        ",
    "\n        Securely delete file or directory\n        \n        Args:\n            path: Path to delete\n            \n        Returns:\n            True if successful, False otherwise\n        ": "\n        ファイルまたはディレクトリを安全に削除します\n        \n        Args:\n            path: 削除するパス\n            \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\n        Validate URL for security issues\n        \n        Args:\n            url: URL to validate\n            \n        Returns:\n            Tuple of (is_safe: bool, message: str)\n        ": "\n        URLのセキュリティ問題を検証します\n        \n        Args:\n            url: 検証するURL\n            \n        Returns:\n            (安全: bool, メッセージ: str)のタプル\n        ",
    "\n        Validate file extension is allowed\n        \n        Args:\n            path: Path to validate\n            \n        Returns:\n            Tuple of (is_allowed: bool, message: str)\n        ": "\n        ファイル拡張子が許可されているか検証します\n        \n        Args:\n            path: 検証するパス\n            \n        Returns:\n            (許可されている: bool, メッセージ: str)のタプル\n        ",
    "\n        Validate installation target directory with enhanced Windows compatibility\n        \n        Args:\n            target_dir: Target installation directory\n            \n        Returns:\n            Tuple of (is_safe: bool, error_messages: List[str])\n        ": "\n        強化されたWindows互換性でインストール先のディレクトリを検証します\n        \n        Args:\n            target_dir: ターゲットインストールディレクトリ\n            \n        Returns:\n            (安全: bool, エラーメッセージ: List[str])のタプル\n        ",
    "\n        Validate list of files for component installation\n        \n        Args:\n            file_list: List of (source, target) path tuples\n            base_source_dir: Base source directory\n            base_target_dir: Base target directory\n            \n        Returns:\n            Tuple of (all_safe: bool, error_messages: List[str])\n        ": "\n        コンポーネントインストールのためのファイルリストを検証します\n        \n        Args:\n            file_list: (ソース, ターゲット) パスタプルのリスト\n            base_source_dir: 基本ソースディレクトリ\n            base_target_dir: 基本ターゲットディレクトリ\n            \n        Returns:\n            (すべて安全: bool, エラーメッセージ: List[str])のタプル\n        ",
    "\n        Validate path for security issues with enhanced cross-platform support\n        \n        This method performs comprehensive security validation including:\n        - Directory traversal attack detection\n        - System directory protection (platform-specific)\n        - Path length and filename validation\n        - Cross-platform path normalization\n        - User-friendly error messages\n        \n        Architecture:\n        - Uses both original and resolved paths for validation\n        - Applies platform-specific patterns for system directories\n        - Checks traversal patterns against original path to catch attacks before normalization\n        - Provides detailed error messages with actionable suggestions\n        \n        Args:\n            path: Path to validate (can be relative or absolute)\n            base_dir: Base directory that path should be within (optional)\n            \n        Returns:\n            Tuple of (is_safe: bool, error_message: str)\n            - is_safe: True if path passes all security checks\n            - error_message: Detailed error message with suggestions if validation fails\n        ": "\n        強化されたクロスプラットフォームサポートでパスのセキュリティ問題を検証します\n        \n        このメソッドは以下を含む包括的なセキュリティ検証を実行します:\n        - ディレクトリトラバーサル攻撃の検出\n        - システムディレクトリの保護（プラットフォーム固有）\n        - パスの長さとファイル名の検証\n        - クロスプラットフォームのパス正規化\n        - ユーザーフレンドリーなエラーメッセージ\n        \n        アーキテクチャ:\n        - 検証に元のパスと解決されたパスの両方を使用\n        - システムディレクトリにプラットフォーム固有のパターンを適用\n        - 正規化前に攻撃をキャッチするために元のパスに対してトラバーサルパターンをチェック\n        - 実行可能な提案を含む詳細なエラーメッセージを提供\n        \n        Args:\n            path: 検証するパス（相対または絶対パス）\n            base_dir: パスが含まれるべき基本ディレクトリ（オプション）\n            \n        Returns:\n            (安全: bool, エラーメッセージ: str)のタプル\n            - is_safe: パスがすべてのセキュリティチェックに合格した場合はTrue\n            - error_message: 検証が失敗した場合の提案付きの詳細なエラーメッセージ\n        ",
    "\nSecurity utilities for SuperClaude installation system\nPath validation and input sanitization\n\nThis module provides comprehensive security validation for file paths and user inputs\nduring SuperClaude installation. It includes protection against:\n- Directory traversal attacks\n- Installation to system directories\n- Path injection attacks\n- Cross-platform security issues\n\nKey Features:\n- Platform-specific validation (Windows vs Unix)\n- User-friendly error messages with actionable suggestions\n- Comprehensive path normalization\n- Backward compatibility with existing validation logic\n\nFixed Issues:\n- GitHub Issue #129: Fixed overly broad regex patterns that prevented installation\n  in legitimate paths containing \"dev\", \"tmp\", \"bin\", etc.\n- Enhanced cross-platform compatibility\n- Improved error message clarity\n\nArchitecture:\n- Separated pattern categories for better maintainability\n- Platform-aware validation logic\n- Comprehensive test coverage\n": "\nSuperClaudeインストールシステム用のセキュリティユーティリティ\nパスの検証と入力のサニタイズ\n\nこのモジュールは、SuperClaudeのインストール中にファイルパスとユーザー入力の包括的なセキュリティ検証を提供します。\nこれには、以下の保護が含まれます:\n- ディレクトリトラバーサル攻撃\n- システムディレクトリへのインストール\n- パスインジェクション攻撃\n- クロスプラットフォームのセキュリティ問題\n\n主な機能:\n- プラットフォーム固有の検証（Windows対Unix）\n- 実行可能な提案を含むユーザーフレンドリーなエラーメッセージ\n- 包括的なパスの正規化\n- 既存の検証ロジックとの下位互換性\n\n修正された問題:\n- GitHub Issue #129: \"dev\"、\"tmp\"、\"bin\"などを含む正当なパスへのインストールを妨げていた過度に広範な正規表現パターンを修正\n- クロスプラットフォーム互換性の強化\n- エラーメッセージの明確さの向上\n\nアーキテクチャ:\n- 保守性を向上させるためにパターンカテゴリを分離\n- プラットフォームを意識した検証ロジック\n- 包括的なテストカバレッジ\n",
    " is allowed": " は許可されています",
    " is not allowed": " は許可されていません",
    " not in ": " がありません ",
    "'. Please choose a location in your user directory instead.": "'。代わりにユーザーディレクトリ内の場所を選択してください。",
    ". Avoid names like CON, PRN, AUX, NUL, COM1-9, LPT1-9.": ". CON, PRN, AUX, NUL, COM1-9, LPT1-9のような名前は避けてください。",
    ". Ensure path doesn't contain dangerous patterns or reserved directories.": ". パスに危険なパターンや予約されたディレクトリが含まれていないことを確認してください。",
    ". Try running as administrator or check folder permissions.": ". 管理者として実行するか、フォルダの権限を確認してみてください。",
    ". Try running as administrator or check folder security settings in Properties > Security.": ". 管理者として実行するか、プロパティ > セキュリティでフォルダのセキュリティ設定を確認してみてください。",
    ". Try: chmod 755 ": ". 試してください: chmod 755 ",
    ". Windows has a 260 character limit for most paths.": ". Windowsでは、ほとんどのパスに260文字の制限があります。",
    "Attempted installation to system directory: ": "システムディレクトリへのインストールが試みられました: ",
    "Cannot determine home directory for .claude validation: ": ".claudeの検証のためにホームディレクトリを特定できません: ",
    "Cannot install to ": "インストールできません: ",
    "Cannot install to Program Files directory '": "Program Filesディレクトリにインストールできません '",
    "Cannot install to Windows system directory '": "Windowsシステムディレクトリにインストールできません '",
    "Cannot install to Windows system directory: ": "Windowsシステムディレクトリにインストールできません: ",
    "Cannot install to system directory: ": "システムディレクトリにインストールできません: ",
    "Cannot resolve target path: ": "ターゲットパスを解決できません: ",
    "Claude directory installation validated: ": "Claudeディレクトリのインストールが検証されました: ",
    "Claude directory outside user home: ": "ユーザーホーム外のClaudeディレクトリ: ",
    "Dangerous filename pattern detected: ": "危険なファイル名パターンが検出されました: ",
    "Extension ": "拡張子 ",
    "File ": "ファイル ",
    "Filename too long: ": "ファイル名が長すぎます: ",
    "Installation must be in current user's directory (": "インストールは現在のユーザーのディレクトリ内で行う必要があります (",
    "Installation to junction points or symbolic links is not allowed for security": "セキュリティ上の理由から、ジャンクションポイントまたはシンボリックリンクへのインストールは許可されていません",
    "Insufficient Windows permissions: ": "Windowsの権限が不十分です: ",
    "Insufficient permissions for Windows installation: ": "Windowsインストールのための権限が不十分です: ",
    "Insufficient permissions: ": "権限が不十分です: ",
    "Insufficient permissions: missing ": "権限が不十分です: 不足 ",
    "Invalid Windows path: ": "無効なWindowsパス: ",
    "Invalid scheme: ": "無効なスキーム: ",
    "Invalid source path ": "無効なソースパス ",
    "Invalid target path ": "無効なターゲットパス ",
    "Invalid target path: ": "無効なターゲットパス: ",
    "Localhost URLs not allowed": "localhostのURLは許可されていません",
    "No extension (allowed)": "拡張子なし（許可）",
    "Null byte detected in path": "パスにヌルバイトが検出されました",
    "Path is safe": "パスは安全です",
    "Path outside allowed directory: ": "許可されたディレクトリ外のパス: ",
    "Path too long: ": "パスが長すぎます: ",
    "Path validation error: ": "パス検証エラー: ",
    "Private IP addresses not allowed": "プライベートIPアドレスは許可されていません",
    "Reserved Windows filename: ": "予約済みのWindowsファイル名: ",
    "Security validation failed for path '": "パス 'のセキュリティ検証に失敗しました",
    "Security validation utilities": "セキュリティ検証ユーティリティ",
    "Security violation: Directory traversal pattern detected in path '": "セキュリティ違反: パス 'でディレクトリトラバーサルパターンが検出されました",
    "URL is safe": "URLは安全です",
    "URL too long": "URLが長すぎます",
    "URL validation error: ": "URL検証エラー: ",
    "Windows path too long: ": "Windowsパスが長すぎます: ",
    "Windows reserved name: ": "Windows予約名: ",
    "dangerous path pattern": "危険なパスパターン",
    "path does not exist": "パスが存在しません",
    "path too long": "パスが長すぎます",
    "permission check error: ": "権限チェックエラー: ",
    "system directory": "システムディレクトリ"
  },
  "./setup/utils/logger.py": {
    "\nLogging system for SuperClaude installation suite\n": "\nSuperClaudeインストールスイートのロギングシステム\n",
    " (Duration: ": " (期間: ",
    " completed: ": " 完了: ",
    " seconds": " 秒",
    "Change console logging level": "コンソールのロギングレベルを変更",
    "Change file logging level": "ファイルのロギングレベルを変更",
    "Clean up old log files": "古いログファイルをクリーンアップ",
    "Close logger and handlers": "ロガーとハンドラーを閉じる",
    "Enhanced logger with console and file output": "コンソールとファイル出力を備えた強化ロガー",
    "Flush all handlers": "すべてのハンドラーをフラッシュ",
    "Full log saved to: ": "完全なログの保存先: ",
    "Get logging statistics": "ロギング統計を取得",
    "Get or create global logger instance": "グローバルロガーインスタンスを取得または作成",
    "Installation Session Complete": "インストールセッション完了",
    "Log critical message": "クリティカルメッセージをログに記録",
    "Log critical message using global logger": "グローバルロガーを使用してクリティカルメッセージをログに記録",
    "Log debug message": "デバッグメッセージをログに記録",
    "Log debug message using global logger": "グローバルロガーを使用してデバッグメッセージをログに記録",
    "Log end of operation": "操作の終了をログに記録",
    "Log error message": "エラーメッセージをログに記録",
    "Log error message using global logger": "グローバルロガーを使用してエラーメッセージをログに記録",
    "Log exception with traceback": "トレースバック付きで例外をログに記録",
    "Log info message": "情報メッセージをログに記録",
    "Log info message using global logger": "グローバルロガーを使用して情報メッセージをログに記録",
    "Log levels": "ログレベル",
    "Log section header": "セクションヘッダーをログに記録",
    "Log start of operation": "操作の開始をログに記録",
    "Log step progress": "ステップの進捗をログに記録",
    "Log success message (info level with special formatting)": "成功メッセージをログに記録（特別なフォーマットのinfoレベル）",
    "Log success message using global logger": "グローバルロガーを使用して成功メッセージをログに記録",
    "Log system information": "システム情報をログに記録",
    "Log warning message": "警告メッセージをログに記録",
    "Log warning message using global logger": "グローバルロガーを使用して警告メッセージをログに記録",
    "Messages logged: ": "ログに記録されたメッセージ: ",
    "Operation ": "操作 ",
    "Setup colorized console handler": "色付きコンソールハンドラーを設定",
    "Setup file handler with rotation": "ローテーション付きファイルハンドラーを設定",
    "Setup logging with specified configuration": "指定された設定でロギングを設定",
    "Starting: ": "開始中: ",
    "System Information": "システム情報",
    "Total runtime: ": "総実行時間: ",
    "[!] Could not setup file logging: ": "[!] ファイルロギングを設定できませんでした: "
  },
  "./setup/utils/environment.py": {
    "\n    Create a .env file with the API keys (alternative to shell config)\n    \n    Args:\n        api_keys: Dictionary of environment variable names to values\n        env_file_path: Path to the .env file (defaults to home directory)\n        \n    Returns:\n        True if .env file was created successfully, False otherwise\n    ": "\n    APIキーを含む.envファイルを作成します（シェル設定の代替）\n    \n    Args:\n        api_keys: 環境変数名と値の辞書\n        env_file_path: .envファイルへのパス（デフォルトはホームディレクトリ）\n        \n    Returns:\n        .envファイルが正常に作成された場合はTrue、それ以外はFalse\n    ",
    "\n    Detect user's shell configuration file\n    \n    Returns:\n        Path to the shell configuration file, or None if not found\n    ": "\n    ユーザーのシェル設定ファイルを検出します\n    \n    Returns:\n        シェル設定ファイルへのパス、見つからない場合はNone\n    ",
    "\n    Get environment variables that were set by SuperClaude\n    \n    Returns:\n        Dictionary of environment variable names to their current values\n    ": "\n    SuperClaudeによって設定された環境変数を取得します\n    \n    Returns:\n        環境変数名とその現在の値の辞書\n    ",
    "\n    Get the name of the current shell\n    \n    Returns:\n        Name of the shell (e.g., 'bash', 'zsh', 'fish')\n    ": "\n    現在のシェルの名前を取得します\n    \n    Returns:\n        シェルの名前 (例: 'bash', 'zsh', 'fish')\n    ",
    "\n    Safely remove environment variables with backup and restore options\n    \n    Args:\n        env_vars_to_remove: Dictionary of environment variable names to remove\n        create_restore_script: Whether to create a script to restore the variables\n        \n    Returns:\n        True if cleanup was successful, False otherwise\n    ": "\n    バックアップと復元オプションを使用して環境変数を安全に削除します\n    \n    Args:\n        env_vars_to_remove: 削除する環境変数名の辞書\n        create_restore_script: 変数を復元するスクリプトを作成するかどうか\n        \n    Returns:\n        クリーンアップが成功した場合はTrue、それ以外はFalse\n    ",
    "\n    Set up environment variables across platforms\n    \n    Args:\n        api_keys: Dictionary of environment variable names to values\n        \n    Returns:\n        True if all variables were set successfully, False otherwise\n    ": "\n    プラットフォーム間で環境変数を設定します\n    \n    Args:\n        api_keys: 環境変数名と値の辞書\n        \n    Returns:\n        すべての変数が正常に設定された場合はTrue、それ以外はFalse\n    ",
    "\n    Validate that environment variables are properly set\n    \n    Args:\n        env_vars: Dictionary of environment variable names to expected values\n        \n    Returns:\n        True if all variables are set correctly, False otherwise\n    ": "\n    環境変数が正しく設定されていることを検証します\n    \n    Args:\n        env_vars: 環境変数名と期待値の辞書\n        \n    Returns:\n        すべての変数が正しく設定されている場合はTrue、それ以外はFalse\n    ",
    "\n# SuperClaude API Key\n": "\n# SuperClaude APIキー\n",
    "\nEnvironment variable management for SuperClaude\nCross-platform utilities for setting up persistent environment variables\n": "\nSuperClaudeの環境変数管理\n永続的な環境変数を設定するためのクロスプラットフォームユーティリティ\n",
    "\necho 'Environment variables restored'\n": "\necho '環境変数が復元されました'\n",
    "\necho Environment variables restored\n": "\necho 環境変数が復元されました\n",
    " already exists in ": " は既に存在します ",
    " already exists in .env file": " は既に.envファイルに存在します",
    " configured for current session": " が現在のセッション用に設定されました",
    " environment variables from tracking": " 環境変数を追跡から",
    " environment variables to tracking": " 環境変数を追跡へ",
    " export from ": " のエクスポート元 ",
    " from ": " から ",
    " from Windows registry": " をWindowsレジストリから",
    " from current session": " を現在のセッションから",
    " has unexpected value": " に予期しない値があります",
    " is not set": " が設定されていません",
    " is set correctly": " は正しく設定されています",
    " new variables": " 個の新しい変数",
    " persistently: ": " を永続的に: ",
    " set persistently": " を永続的に設定",
    "# Generated during uninstall\n\n": "# アンインストール中に生成\n\n",
    "# SuperClaude API Key": "# SuperClaude APIキー",
    "# SuperClaude API Keys\n": "# SuperClaude APIキー\n",
    "# SuperClaude Environment Variable Restore Script\n": "# SuperClaude 環境変数復元スクリプト\n",
    "@echo off\n": "@echo off\n",
    "Add environment variables to tracking": "環境変数を追跡に追加",
    "Added ": "追加済み ",
    "Changes will take effect in new terminal sessions": "変更は新しいターミナルセッションで有効になります",
    "Could not create .env file: ": ".envファイルを作成できませんでした: ",
    "Could not create restore script": "復元スクリプトを作成できませんでした",
    "Could not load environment tracking: ": "環境追跡を読み込めませんでした: ",
    "Could not remove ": "削除できませんでした ",
    "Could not save environment tracking: ": "環境追跡を保存できませんでした: ",
    "Could not set ": "設定できませんでした ",
    "Could not update ": "更新できませんでした ",
    "Create a script to restore environment variables": "環境変数を復元するスクリプトを作成",
    "Created .env file at ": ".envファイルを次の場所に作成しました ",
    "Created .env file with ": ".envファイルを...で作成しました ",
    "Created restore script: ": "復元スクリプトを作成しました: ",
    "Environment variable ": "環境変数 ",
    "Environment variables configured successfully": "環境変数が正常に設定されました",
    "Environment variables removed successfully": "環境変数が正常に削除されました",
    "Failed to create .env file: ": ".envファイルの作成に失敗しました: ",
    "Failed to create restore script: ": "復元スクリプトの作成に失敗しました: ",
    "Failed to remove ": "削除に失敗しました ",
    "Failed to set ": "設定に失敗しました ",
    "Get path to environment variable tracking file": "環境変数追跡ファイルへのパスを取得",
    "Load environment variable tracking data": "環境変数追跡データを読み込み",
    "New environment variables will be available in new terminal sessions": "新しい環境変数は新しいターミナルセッションで利用可能になります",
    "REM Generated during uninstall\n\n": "REM アンインストール中に生成\n\n",
    "REM SuperClaude Environment Variable Restore Script\n": "REM SuperClaude 環境変数復元スクリプト\n",
    "Registry deletion for ": "レジストリ削除: ",
    "Remove environment variable export from shell configuration file": "シェル設定ファイルから環境変数エクスポートを削除",
    "Remove environment variables from tracking": "環境変数を追跡から削除",
    "Removed ": "削除済み ",
    "Restart your terminal or source your shell config to apply changes": "変更を適用するには、ターミナルを再起動するか、シェル設定を再読み込みしてください",
    "Save environment variable tracking data": "環境変数追跡データを保存",
    "Some environment variables could not be removed": "一部の環境変数を削除できませんでした",
    "Some environment variables could not be set persistently": "一部の環境変数を永続的に設定できませんでした",
    "Variable ": "変数 ",
    "Windows environment variable ": "Windows環境変数 ",
    "You can set them manually or check the logs for details": "手動で設定するか、詳細についてログを確認できます",
    "[INFO] Removing environment variables...": "[情報] 環境変数を削除中...",
    "[INFO] Setting up environment variables...": "[情報] 環境変数を設定中...",
    "echo 'export ": "echo 'export ",
    "export ": "export ",
    "setx ": "setx "
  },
  "./setup/components/mcp.py": {
    "\n        Check prerequisites for MCP component\n        ": "\n        MCPコンポーネントの前提条件を確認します\n        ",
    " SuperClaude-managed servers removed)": " 個のSuperClaude管理サーバーを削除しました)",
    "Check if a server configuration matches SuperClaude's templates\n        \n        This helps determine if a server was installed by SuperClaude or manually\n        configured by the user, allowing us to preserve user customizations.\n        ": "サーバー設定がSuperClaudeのテンプレートと一致するか確認します\n\n        これにより、サーバーがSuperClaudeによってインストールされたか、ユーザーによって手動で設定されたかを判断でき、\n        ユーザーのカスタマイズを保持することができます。\n        ",
    "Could not load Claude config for cleanup": "クリーンアップのためにClaude設定を読み込めませんでした",
    "Cross-platform file locking": "クロスプラットフォームのファイルロック",
    "Cross-platform file unlocking": "クロスプラットフォームのファイルロック解除",
    "Failed to save updated Claude configuration": "更新されたClaude設定の保存に失敗しました",
    "Failed to update metadata: ": "メタデータの更新に失敗しました: ",
    "Get component metadata": "コンポーネントのメタデータを取得",
    "Get dependencies": "依存関係を取得",
    "Get estimated size - minimal since we only modify config": "推定サイズを取得 - 設定のみを変更するため最小限",
    "Get list of servers that were installed by SuperClaude": "SuperClaudeによってインストールされたサーバーのリストを取得",
    "Get source directory for MCP config files": "MCP設定ファイルのソースディレクトリを取得",
    "Initialize MCP component": "MCPコンポーネントを初期化",
    "Load MCP server configuration snippet": "MCPサーバー設定スニペットを読み込み",
    "Load user's Claude configuration with file locking": "ファイルロック付きでユーザーのClaude設定を読み込み",
    "MCP component uninstalled (": "MCPコンポーネントがアンインストールされました (",
    "MCP component uninstalled (no SuperClaude-managed servers to remove)": "MCPコンポーネントがアンインストールされました (削除するSuperClaude管理サーバーなし)",
    "MCP servers configuration component": "MCPサーバー設定コンポーネント",
    "No MCP servers configured": "MCPサーバーが設定されていません",
    "Override parent method - MCP component doesn't use traditional file installation": "親メソッドをオーバーライド - MCPコンポーネントは従来のファイルインストールを使用しません",
    "Post-installation tasks": "インストール後のタスク",
    "Precisely merge MCP server config, preserving user customizations\n        \n        Args:\n            existing_config: User's current mcpServers configuration\n            new_config: New MCP server configuration to merge\n            server_key: Server key for logging purposes\n        ": "ユーザーのカスタマイズを保持しつつ、MCPサーバー設定を正確にマージします\n        \n        Args:\n            existing_config: ユーザーの現在のmcpServers設定\n            new_config: マージする新しいMCPサーバー設定\n            server_key: ロギング用のサーバーキー\n        ",
    "Preserved user-customized MCP server: ": "ユーザーがカスタマイズしたMCPサーバーを保持しました: ",
    "Removed SuperClaude-managed MCP server: ": "SuperClaude管理のMCPサーバーを削除しました: ",
    "Removing MCP server configurations...": "MCPサーバー設定を削除中...",
    "Save user's Claude configuration with backup and file locking": "バックアップとファイルロック付きでユーザーのClaude設定を保存",
    "Set which MCP servers were selected for configuration": "設定用に選択されたMCPサーバーを設定",
    "Unexpected error during MCP uninstallation: ": "MCPアンインストール中に予期しないエラーが発生しました: ",
    "Updated metadata with MCP component registration": "MCPコンポーネント登録でメタデータを更新しました"
  },
  "./setup/services/files.py": {
    "\n        Calculate file hash\n        \n        Args:\n            file_path: Path to file\n            algorithm: Hash algorithm (md5, sha1, sha256, etc.)\n            \n        Returns:\n            Hex hash string or None if error\n        ": "\n        ファイルハッシュを計算します\n        \n        Args:\n            file_path: ファイルへのパス\n            algorithm: ハッシュアルゴリズム (md5, sha1, sha256, etc.)\n            \n        Returns:\n            16進数のハッシュ文字列、またはエラーの場合はNone\n        ",
    "\n        Calculate total size of directory in bytes\n        \n        Args:\n            directory: Directory path\n            \n        Returns:\n            Total size in bytes\n        ": "\n        ディレクトリの合計サイズをバイト単位で計算します\n        \n        Args:\n            directory: ディレクトリパス\n            \n        Returns:\n            合計サイズ（バイト）\n        ",
    "\n        Convert path with ~ to actual home path on any OS\n        \n        Args:\n            path: Path string potentially containing ~\n            \n        Returns:\n            Resolved Path object\n        ": "\n        ~ を含むパスを任意のOSで実際のホームパスに変換します\n        \n        Args:\n            path: ~ を含む可能性のあるパス文字列\n            \n        Returns:\n            解決されたPathオブジェクト\n        ",
    "\n        Copy single file with permission preservation\n        \n        Args:\n            source: Source file path\n            target: Target file path\n            preserve_permissions: Whether to preserve file permissions\n            \n        Returns:\n            True if successful, False otherwise\n        ": "\n        権限を保持して単一ファイルをコピーします\n        \n        Args:\n            source: ソースファイルパス\n            target: ターゲットファイルパス\n            preserve_permissions: ファイル権限を保持するかどうか\n            \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\n        Create backup copy of file\n        \n        Args:\n            file_path: Path to file to backup\n            backup_suffix: Suffix to add to backup file\n            \n        Returns:\n            Path to backup file or None if failed\n        ": "\n        ファイルのバックアップコピーを作成します\n        \n        Args:\n            file_path: バックアップするファイルへのパス\n            backup_suffix: バックアップファイルに追加する接尾辞\n            \n        Returns:\n            バックアップファイルへのパス、または失敗した場合はNone\n        ",
    "\n        Create directory and parents if they don't exist\n        \n        Args:\n            directory: Directory path to create\n            mode: Directory permissions (Unix only)\n            \n        Returns:\n            True if successful, False otherwise\n        ": "\n        ディレクトリとその親が存在しない場合に作成します\n        \n        Args:\n            directory: 作成するディレクトリパス\n            mode: ディレクトリ権限（Unixのみ）\n            \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\n        Find files matching pattern\n        \n        Args:\n            directory: Directory to search\n            pattern: Glob pattern to match\n            recursive: Whether to search recursively\n            \n        Returns:\n            List of matching file paths\n        ": "\n        パターンに一致するファイルを検索します\n        \n        Args:\n            directory: 検索するディレクトリ\n            pattern: 一致させるglobパターン\n            recursive: 再帰的に検索するかどうか\n            \n        Returns:\n            一致するファイルパスのリスト\n        ",
    "\n        Get free disk space at path in bytes\n        \n        Args:\n            path: Path to check (can be file or directory)\n            \n        Returns:\n            Free space in bytes\n        ": "\n        パスの空きディスク容量をバイト単位で取得します\n        \n        Args:\n            path: 確認するパス（ファイルまたはディレクトリ）\n            \n        Returns:\n            空き容量（バイト）\n        ",
    "\n        Get summary of file operations performed\n        \n        Returns:\n            Dict with operation statistics\n        ": "\n        実行されたファイル操作の概要を取得します\n        \n        Returns:\n            操作統計を含む辞書\n        ",
    "\n        Initialize file manager\n        \n        Args:\n            dry_run: If True, only simulate file operations\n        ": "\n        ファイルマネージャーを初期化します\n        \n        Args:\n            dry_run: Trueの場合、ファイル操作をシミュレートするだけです\n        ",
    "\n        Recursively copy directory with gitignore-style patterns\n        \n        Args:\n            source: Source directory path\n            target: Target directory path\n            ignore_patterns: List of patterns to ignore (gitignore style)\n            \n        Returns:\n            True if successful, False otherwise\n        ": "\n        gitignore形式のパターンでディレクトリを再帰的にコピーします\n        \n        Args:\n            source: ソースディレクトリパス\n            target: ターゲットディレクトリパス\n            ignore_patterns: 無視するパターンのリスト（gitignore形式）\n            \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\n        Remove directory\n        \n        Args:\n            directory: Directory path to remove\n            recursive: Whether to remove recursively\n            \n        Returns:\n            True if successful, False otherwise\n        ": "\n        ディレクトリを削除します\n        \n        Args:\n            directory: 削除するディレクトリパス\n            recursive: 再帰的に削除するかどうか\n            \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\n        Remove single file\n        \n        Args:\n            file_path: Path to file to remove\n            \n        Returns:\n            True if successful, False otherwise\n        ": "\n        単一ファイルを削除します\n        \n        Args:\n            file_path: 削除するファイルへのパス\n            \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\n        Verify file integrity using hash\n        \n        Args:\n            file_path: Path to file to verify\n            expected_hash: Expected hash value\n            algorithm: Hash algorithm used\n            \n        Returns:\n            True if file matches expected hash, False otherwise\n        ": "\n        ハッシュを使用してファイルの整合性を検証します\n        \n        Args:\n            file_path: 検証するファイルへのパス\n            expected_hash: 期待されるハッシュ値\n            algorithm: 使用されるハッシュアルゴリズム\n            \n        Returns:\n            ファイルが期待されるハッシュと一致する場合はTrue、それ以外はFalse\n        ",
    "\nCross-platform file management for SuperClaude installation system\n": "\nSuperClaudeインストールシステム用のクロスプラットフォームファイル管理\n",
    " directory ": " ディレクトリ ",
    " executable": " 実行可能",
    " executable: ": " 実行可能: ",
    " is not a file, skipping": " はファイルではないため、スキップします",
    "Cross-platform file operations manager": "クロスプラットフォームファイル操作マネージャー",
    "Error copying ": "コピーエラー ",
    "Error copying directory ": "ディレクトリのコピーエラー ",
    "Error creating directory ": "ディレクトリの作成エラー ",
    "Error making ": "作成エラー ",
    "Error removing directory ": "ディレクトリの削除エラー ",
    "Error removing file ": "ファイルの削除エラー ",
    "Remove all files and directories created during this session": "このセッション中に作成されたすべてのファイルとディレクトリを削除",
    "Source directory not found: ": "ソースディレクトリが見つかりません: ",
    "Source file not found: ": "ソースファイルが見つかりません: ",
    "Source is not a directory: ": "ソースはディレクトリではありません: ",
    "Source is not a file: ": "ソースはファイルではありません: ",
    "Warning: ": "警告: ",
    "[DRY RUN] Would ": "[ドライラン] ",
    "[DRY RUN] Would cleanup tracked files": "[ドライラン] 追跡されたファイルをクリーンアップします",
    "[DRY RUN] Would copy ": "[ドライラン] コピーします ",
    "[DRY RUN] Would copy directory ": "[ドライラン] ディレクトリをコピーします ",
    "[DRY RUN] Would create directory ": "[ドライラン] ディレクトリを作成します ",
    "[DRY RUN] Would make ": "[ドライラン] 作成します ",
    "[DRY RUN] Would remove file ": "[ドライラン] ファイルを削除します ",
    "recursively remove": "再帰的に削除"
  },
  "./setup/services/claude_md.py": {
    "\n        Add new imports with duplicate checking and user content preservation\n        \n        Args:\n            files: List of filenames to import\n            category: Category name for organizing imports\n            \n        Returns:\n            True if successful, False otherwise\n        ": "\n        重複チェックとユーザーコンテンツの保持を行いながら新しいインポートを追加します\n        \n        Args:\n            files: インポートするファイル名のリスト\n            category: インポートを整理するためのカテゴリ名\n            \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\n        Create CLAUDE.md with default content if it doesn't exist\n        ": "\n        CLAUDE.mdが存在しない場合、デフォルトのコンテンツで作成します\n        ",
    "\n        Extract user content (everything before framework imports section)\n        \n        Args:\n            content: Full CLAUDE.md content\n            \n        Returns:\n            User content without framework imports\n        ": "\n        ユーザーコンテンツ（フレームワークのインポートセクションより前のすべて）を抽出します\n        \n        Args:\n            content: 完全なCLAUDE.mdのコンテンツ\n            \n        Returns:\n            フレームワークのインポートを含まないユーザーコンテンツ\n        ",
    "\n        Organize imports into categorized sections\n        \n        Args:\n            files_by_category: Dict mapping category names to lists of files\n            \n        Returns:\n            Formatted import sections\n        ": "\n        インポートをカテゴリ別のセクションに整理します\n        \n        Args:\n            files_by_category: カテゴリ名とファイルリストをマッピングする辞書\n            \n        Returns:\n            フォーマットされたインポートセクション\n        ",
    "\n        Parse CLAUDE.md for existing @import statements\n        \n        Returns:\n            Set of already imported filenames (without @)\n        ": "\n        既存の@import文をCLAUDE.mdから解析します\n        \n        Returns:\n            既にインポートされているファイル名のセット（@なし）\n        ",
    "\n        Parse existing framework imports organized by category\n        \n        Args:\n            content: Full CLAUDE.md content\n            \n        Returns:\n            Dict mapping category names to lists of imported files\n        ": "\n        カテゴリ別に整理された既存のフレームワークインポートを解析します\n        \n        Args:\n            content: 完全なCLAUDE.mdのコンテンツ\n            \n        Returns:\n            カテゴリ名とインポートされたファイルリストをマッピングする辞書\n        ",
    "\n        Read existing CLAUDE.md content\n        \n        Returns:\n            Existing content or empty string if file doesn't exist\n        ": "\n        既存のCLAUDE.mdのコンテンツを読み込みます\n        \n        Returns:\n            既存のコンテンツ、またはファイルが存在しない場合は空文字列\n        ",
    "\n        Remove specific imports from CLAUDE.md\n        \n        Args:\n            files: List of filenames to remove from imports\n            \n        Returns:\n            True if successful, False otherwise\n        ": "\n        CLAUDE.mdから特定のインポートを削除します\n        \n        Args:\n            files: インポートから削除するファイル名のリスト\n            \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\nCLAUDE.md Manager for preserving user customizations while managing framework imports\n": "\nフレームワークのインポートを管理しながらユーザーのカスタマイズを保持するためのCLAUDE.mdマネージャー\n",
    " imports from CLAUDE.md": " 個のインポートをCLAUDE.mdから",
    " new imports": " 個の新しいインポート",
    " new imports to category '": " 個の新しいインポートをカテゴリ '",
    "# SuperClaude Entry Point\n\nThis file serves as the entry point for the SuperClaude framework.\nYou can add your own custom instructions and configurations here.\n\nThe SuperClaude framework components will be automatically imported below.\n": "# SuperClaude エントリポイント\n\nこのファイルはSuperClaudeフレームワークのエントリポイントとして機能します。\nここに独自のカスタム指示や設定を追加できます。\n\nSuperClaudeフレームワークコンポーネントは以下に自動的にインポートされます。\n",
    "# SuperClaude Framework Components": "# SuperClaude フレームワークコンポーネント",
    "# ═══════════════════════════════════════════════════\n# SuperClaude Framework Components": "# ═══════════════════════════════════════════════════\n# SuperClaude フレームワークコンポーネント",
    "Adding ": "追加中 ",
    "All files already imported, no changes needed": "すべてのファイルは既にインポートされているため、変更は不要です",
    "Could not read existing CLAUDE.md imports: ": "既存のCLAUDE.mdのインポートを読み込めませんでした: ",
    "Could not read existing CLAUDE.md: ": "既存のCLAUDE.mdを読み込めませんでした: ",
    "Created CLAUDE.md with default content": "デフォルトのコンテンツでCLAUDE.mdを作成しました",
    "Failed to create CLAUDE.md: ": "CLAUDE.mdの作成に失敗しました: ",
    "Failed to remove imports from CLAUDE.md: ": "CLAUDE.mdからのインポートの削除に失敗しました: ",
    "Failed to update CLAUDE.md: ": "CLAUDE.mdの更新に失敗しました: ",
    "Found existing imports: ": "既存のインポートが見つかりました: ",
    "Manages CLAUDE.md file updates while preserving user customizations": "ユーザーのカスタマイズを保持しながらCLAUDE.mdファイルの更新を管理します",
    "Removed ": "削除済み ",
    "Updated CLAUDE.md with ": "CLAUDE.mdを更新しました: "
  },
  "./setup/services/config.py": {
    "\n        Get component names by category\n        \n        Args:\n            category: Component category\n            \n        Returns:\n            List of component names in category\n        ": "\n        カテゴリ別のコンポーネント名を取得します\n        \n        Args:\n            category: コンポーネントカテゴリ\n            \n        Returns:\n            カテゴリ内のコンポーネント名のリスト\n        ",
    "\n        Get consolidated requirements for specific components\n        \n        Args:\n            component_names: List of component names\n            \n        Returns:\n            Consolidated requirements dict\n        ": "\n        特定のコンポーネントの統合された要件を取得します\n        \n        Args:\n            component_names: コンポーネント名のリスト\n            \n        Returns:\n            統合された要件の辞書\n        ",
    "\n        Get dependencies for a component\n        \n        Args:\n            component_name: Name of component\n            \n        Returns:\n            List of dependency component names\n        ": "\n        コンポーネントの依存関係を取得します\n        \n        Args:\n            component_name: コンポーネント名\n            \n        Returns:\n            依存コンポーネント名のリスト\n        ",
    "\n        Get information about a specific component\n        \n        Args:\n            component_name: Name of component\n            \n        Returns:\n            Component info dict or None if not found\n        ": "\n        特定のコンポーネントに関する情報を取得します\n        \n        Args:\n            component_name: コンポーネント名\n            \n        Returns:\n            コンポーネント情報辞書、見つからない場合はNone\n        ",
    "\n        Get list of enabled component names\n        \n        Returns:\n            List of enabled component names\n        ": "\n        有効なコンポーネント名のリストを取得します\n        \n        Returns:\n            有効なコンポーネント名のリスト\n        ",
    "\n        Get system requirements\n        \n        Returns:\n            System requirements dict\n        ": "\n        システム要件を取得します\n        \n        Returns:\n            システム要件の辞書\n        ",
    "\n        Initialize config manager\n        \n        Args:\n            config_dir: Directory containing configuration files\n        ": "\n        設定マネージャーを初期化します\n        \n        Args:\n            config_dir: 設定ファイルを含むディレクトリ\n        ",
    "\n        Validate all configuration files\n        \n        Returns:\n            List of validation errors (empty if all valid)\n        ": "\n        すべての設定ファイルを検証します\n        \n        Returns:\n            検証エラーのリスト（すべて有効な場合は空）\n        ",
    "\nConfiguration management for SuperClaude installation system\n": "\nSuperClaudeインストールシステムの設定管理\n",
    "Clear cached configuration data": "キャッシュされた設定データをクリア",
    "Dummy validation function": "ダミーの検証関数",
    "Expected array, got ": "配列を期待していましたが、取得したのは ",
    "Expected integer, got ": "整数を期待していましたが、取得したのは ",
    "Expected object, got ": "オブジェクトを期待していましたが、取得したのは ",
    "Expected string, got ": "文字列を期待していましたが、取得したのは ",
    "Features config error: ": "機能設定エラー: ",
    "Features config not found: ": "機能設定が見つかりません: ",
    "Invalid JSON in ": "無効なJSON: ",
    "Invalid features schema: ": "無効な機能スキーマ: ",
    "Invalid requirements schema: ": "無効な要件スキーマ: ",
    "Manages configuration files and validation": "設定ファイルと検証を管理します",
    "Requirements config error: ": "要件設定エラー: ",
    "Requirements config not found: ": "要件設定が見つかりません: ",
    "Simple validation error for when jsonschema is not available": "jsonschemaが利用できない場合のシンプルな検証エラー"
  },
  "./setup/services/settings.py": {
    "\n        Add component to registry in metadata\n        \n        Args:\n            component_name: Name of component\n            component_info: Component metadata dict\n        ": "\n        メタデータのレジストリにコンポーネントを追加します\n        \n        Args:\n            component_name: コンポーネント名\n            component_info: コンポーネントメタデータ辞書\n        ",
    "\n        Check if component is registered as installed\n        \n        Args:\n            component_name: Name of component to check\n            \n        Returns:\n            True if component is installed, False otherwise\n        ": "\n        コンポーネントがインストール済みとして登録されているか確認します\n        \n        Args:\n            component_name: 確認するコンポーネント名\n            \n        Returns:\n            コンポーネントがインストールされている場合はTrue、それ以外はFalse\n        ",
    "\n        Deep merge modifications into existing settings\n\n        Args:\n            modifications: Settings modifications to merge\n\n        Returns:\n            Merged settings dict\n        ": "\n        既存の設定に変更をディープマージします\n\n        Args:\n            modifications: マージする設定変更\n\n        Returns:\n            マージされた設定辞書\n        ",
    "\n        Deep merge two dictionaries\n        \n        Args:\n            base: Base dictionary\n            overlay: Dictionary to merge on top\n            \n        Returns:\n            Merged dictionary\n        ": "\n        2つの辞書をディープマージします\n        \n        Args:\n            base: 基本となる辞書\n            overlay: 上にマージする辞書\n            \n        Returns:\n            マージされた辞書\n        ",
    "\n        Get SuperClaude framework version from metadata\n\n        Returns:\n            Version string or None if not set\n        ": "\n        メタデータからSuperClaudeフレームワークのバージョンを取得します\n\n        Returns:\n            バージョン文字列、設定されていない場合はNone\n        ",
    "\n        Get all installed components from registry\n        \n        Returns:\n            Dict of component_name -> component_info\n        ": "\n        レジストリからインストールされているすべてのコンポーネントを取得します\n        \n        Returns:\n            component_name -> component_info の辞書\n        ",
    "\n        Get installed version of component\n        \n        Args:\n            component_name: Name of component\n            \n        Returns:\n            Version string or None if not installed\n        ": "\n        インストールされているコンポーネントのバージョンを取得します\n        \n        Args:\n            component_name: コンポーネント名\n            \n        Returns:\n            インストールされている場合はバージョン文字列、それ以外はNone\n        ",
    "\n        Get metadata value using dot-notation path\n        \n        Args:\n            key_path: Dot-separated path (e.g., \"framework.version\")\n            default: Default value if key not found\n            \n        Returns:\n            Metadata value or default\n        ": "\n        ドット表記のパスを使用してメタデータ値を取得します\n        \n        Args:\n            key_path: ドットで区切られたパス (例: \"framework.version\")\n            default: キーが見つからない場合のデフォルト値\n            \n        Returns:\n            メタデータ値またはデフォルト値\n        ",
    "\n        Get setting value using dot-notation path\n        \n        Args:\n            key_path: Dot-separated path (e.g., \"hooks.enabled\")\n            default: Default value if key not found\n            \n        Returns:\n            Setting value or default\n        ": "\n        ドット表記のパスを使用して設定値を取得します\n        \n        Args:\n            key_path: ドットで区切られたパス (例: \"hooks.enabled\")\n            default: キーが見つからない場合のデフォルト値\n            \n        Returns:\n            設定値またはデフォルト値\n        ",
    "\n        List available settings backups\n        \n        Returns:\n            List of backup info dicts with name, path, and timestamp\n        ": "\n        利用可能な設定のバックアップを一覧表示します\n        \n        Returns:\n            名前、パス、タイムスタンプを含むバックアップ情報辞書のリスト\n        ",
    "\n        Remove component from registry in metadata\n        \n        Args:\n            component_name: Name of component to remove\n            \n        Returns:\n            True if component was removed, False if not found\n        ": "\n        メタデータのレジストリからコンポーネントを削除します\n        \n        Args:\n            component_name: 削除するコンポーネント名\n            \n        Returns:\n            コンポーネントが削除された場合はTrue、見つからない場合はFalse\n        ",
    "\n        Remove old backup files, keeping only the most recent\n        \n        Args:\n            keep_count: Number of backups to keep\n        ": "\n        古いバックアップファイルを削除し、最新のもののみを保持します\n        \n        Args:\n            keep_count: 保持するバックアップの数\n        ",
    "\n        Remove setting using dot-notation path\n        \n        Args:\n            key_path: Dot-separated path to remove\n            create_backup: Whether to create backup before updating\n            \n        Returns:\n            True if setting was removed, False if not found\n        ": "\n        ドット表記のパスを使用して設定を削除します\n        \n        Args:\n            key_path: 削除するドットで区切られたパス\n            create_backup: 更新前にバックアップを作成するかどうか\n            \n        Returns:\n            設定が削除された場合はTrue、見つからない場合はFalse\n        ",
    "\n        Restore settings from backup\n        \n        Args:\n            backup_name: Name of backup file to restore\n            \n        Returns:\n            True if successful, False otherwise\n        ": "\n        バックアップから設定を復元します\n        \n        Args:\n            backup_name: 復元するバックアップファイルの名前\n            \n        Returns:\n            成功した場合はTrue、それ以外はFalse\n        ",
    "\n        Set setting value using dot-notation path\n        \n        Args:\n            key_path: Dot-separated path (e.g., \"hooks.enabled\")\n            value: Value to set\n            create_backup: Whether to create backup before updating\n        ": "\n        ドット表記のパスを使用して設定値を設定します\n        \n        Args:\n            key_path: ドットで区切られたパス (例: \"hooks.enabled\")\n            value: 設定する値\n            create_backup: 更新前にバックアップを作成するかどうか\n        ",
    "\n        Update SuperClaude framework version in metadata\n        \n        Args:\n            version: Framework version string\n        ": "\n        メタデータ内のSuperClaudeフレームワークのバージョンを更新します\n        \n        Args:\n            version: フレームワークのバージョン文字列\n        ",
    "\n        Update settings with modifications\n\n        Args:\n            modifications: Settings modifications to apply\n            create_backup: Whether to create backup before updating\n        ": "\n        変更を加えて設定を更新します\n\n        Args:\n            modifications: 適用する設定変更\n            create_backup: 更新前にバックアップを作成するかどうか\n        ",
    "Cannot backup non-existent settings file": "存在しない設定ファイルはバックアップできません",
    "Could not load metadata from ": "メタデータを読み込めませんでした: ",
    "Could not load settings from ": "設定を読み込めませんでした: ",
    "Could not save metadata to ": "メタデータを保存できませんでした: ",
    "Could not save settings to ": "設定を保存できませんでした: "
  },
  "./scripts/build_and_upload.py": {
    "\nPyPI Build and Upload Script for SuperClaude Framework\nHandles building, validation, and uploading to PyPI with proper error handling\n": "\nSuperClaudeフレームワーク用のPyPIビルドおよびアップロードスクリプト\n適切なエラー処理でビルド、検証、PyPIへのアップロードを処理します\n",
    "   Error: ": "   エラー: ",
    "   Exit code: ": "   終了コード: ",
    "   Note: This will install in a separate process": "   注: これは別のプロセスでインストールされます",
    " completed successfully": " が正常に完了しました",
    " failed with exception: ": " は例外で失敗しました: ",
    " failed:": " が失敗しました:",
    "Build and upload SuperClaude to PyPI": "SuperClaudeをビルドしてPyPIにアップロード",
    "Build the package": "パッケージをビルド",
    "Building package distributions": "パッケージ配布物をビルド中",
    "Clean previous build artifacts": "以前のビルドアーティファクトをクリーンアップ",
    "Install required build tools": "必要なビルドツールをインストール",
    "Installing ": "インストール中 ",
    "Installing from TestPyPI": "TestPyPIからインストール中",
    "Main execution function": "メイン実行関数",
    "Only clean build artifacts": "ビルドアーティファクトのみをクリーンアップ",
    "Run a command and return success status and output": "コマンドを実行し、成功ステータスと出力を返す",
    "Skip build step (use existing dist)": "ビルドステップをスキップ（既存のdistを使用）",
    "Skip validation steps": "検証ステップをスキップ",
    "Test installation from TestPyPI": "TestPyPIからのインストールをテスト",
    "Upload to TestPyPI for testing": "テストのためにTestPyPIにアップロード",
    "Upload to TestPyPI instead of PyPI": "PyPIの代わりにTestPyPIにアップロード",
    "Upload to production PyPI": "本番PyPIにアップロード",
    "Uploading to PyPI": "PyPIにアップロード中",
    "Uploading to TestPyPI": "TestPyPIにアップロード中",
    "Validate project structure before building": "ビルド前にプロジェクト構造を検証",
    "Validate the built distribution": "ビルドされた配布物を検証",
    "Validating distributions with twine": "twineで配布物を検証中",
    "✅ All operations completed successfully!": "✅ すべての操作が正常に完了しました！",
    "✅ Package import successful, version: ": "✅ パッケージのインポートに成功しました、バージョン: ",
    "✅ Project structure validation passed": "✅ プロジェクト構造の検証に合格しました",
    "✅ Test installation successful": "✅ テストインストールに成功しました",
    "❌ Could not import version from SuperClaude: ": "❌ SuperClaudeからバージョンをインポートできませんでした: ",
    "❌ Distribution directory does not exist": "❌ 配布ディレクトリが存在しません",
    "❌ Distribution validation failed": "❌ 配布物の検証に失敗しました",
    "❌ Failed to install build tools": "❌ ビルドツールのインストールに失敗しました",
    "❌ Missing required file: ": "❌ 必要なファイルがありません: ",
    "❌ No distribution files found": "❌ 配布ファイルが見つかりません",
    "❌ Package build failed": "❌ パッケージのビルドに失敗しました",
    "❌ Package import failed: ": "❌ パッケージのインポートに失敗しました: ",
    "❌ Project structure validation failed": "❌ プロジェクト構造の検証に失敗しました",
    "❌ Test installation failed": "❌ テストインストールに失敗しました",
    "❌ Upload cancelled": "❌ アップロードがキャンセルされました",
    "❌ Upload to PyPI failed": "❌ PyPIへのアップロードに失敗しました",
    "❌ Upload to TestPyPI failed": "❌ TestPyPIへのアップロードに失敗しました",
    "📁 Working directory: ": "📁 作業ディレクトリ: ",
    "📦 Found distribution files:": "📦 配布ファイルが見つかりました:",
    "📦 Package version: ": "📦 パッケージバージョン: ",
    "🔍 Validating project structure...": "🔍 プロジェクト構造を検証中...",
    "🚀 SuperClaude PyPI Build and Upload Script": "🚀 SuperClaude PyPI ビルドおよびアップロードスクリプト",
    "🧪 Testing installation from TestPyPI...": "🧪 TestPyPIからのインストールをテスト中...",
    "🧹 Removing ": "🧹 削除中 "
  },
  "./scripts/validate_pypi_ready.py": {
    "\nNext steps:": "\n次のステップ:",
    "\nPyPI Readiness Validation Script\nChecks if SuperClaude project is ready for PyPI publication\n": "\nPyPI準備完了検証スクリプト\nSuperClaudeプロジェクトがPyPI公開の準備ができているか確認します\n",
    "\n⚙️ Checking pyproject.toml configuration...": "\n⚙️ pyproject.tomlの設定を確認中...",
    "\n🏗️ Checking package structure...": "\n🏗️ パッケージ構造を確認中...",
    "\n📄 Checking required files...": "\n📄 必要なファイルを確認中...",
    "\n📈 Overall: ": "\n📈 全体: ",
    "\n🔍 Checking version consistency...": "\n🔍 バージョンの一貫性を確認中...",
    "\n🧪 Testing package import...": "\n🧪 パッケージのインポートをテスト中...",
    " PyPI classifiers defined": " 個のPyPI分類子が定義されています",
    " check failed with exception: ": " のチェックが例外で失敗しました: ",
    " checks passed": " 個のチェックに合格しました",
    "Check if a required file exists": "必要なファイルが存在するか確認",
    "Check if all required files are present": "すべての必要なファイルが存在するか確認",
    "Check if package structure is correct": "パッケージ構造が正しいか確認",
    "Check if versions are consistent across files": "ファイル間でバージョンが一貫しているか確認",
    "Check pyproject.toml configuration": "pyproject.tomlの設定を確認",
    "Import Test": "インポートテスト",
    "License file": "ライセンスファイル",
    "Main entry point": "メインエントリポイント",
    "Main validation function": "メイン検証関数",
    "Package Structure": "パッケージ構造",
    "Package configuration": "パッケージ設定",
    "Package manifest": "パッケージマニフェスト",
    "Project README": "プロジェクトREADME",
    "PyProject Configuration": "PyProject設定",
    "Required Files": "必要なファイル",
    "Setup script": "セットアップスクリプト",
    "Test if the package can be imported": "パッケージがインポートできるかテスト",
    "Version Consistency": "バージョンの一貫性",
    "⚠️ No PyPI classifiers defined": "⚠️ PyPI分類子が定義されていません",
    "✅ All versions consistent: ": "✅ すべてのバージョンが一貫しています: ",
    "✅ CLI entry point: ": "✅ CLIエントリポイント: ",
    "✅ SuperClaude import successful": "✅ SuperClaudeのインポートに成功しました",
    "❌ Error importing SuperClaude version: ": "❌ SuperClaudeバージョンのインポートエラー: ",
    "❌ Error importing setup version: ": "❌ セットアップバージョンのインポートエラー: ",
    "❌ Error reading pyproject.toml: ": "❌ pyproject.tomlの読み取りエラー: ",
    "❌ Import failed: ": "❌ インポートに失敗しました: ",
    "❌ Missing ": "❌ 不足: ",
    "❌ Missing CLI entry point": "❌ CLIエントリポイントがありません",
    "❌ Missing required field: ": "❌ 必要なフィールドがありません: ",
    "❌ Project needs fixes before PyPI publication": "❌ プロジェクトはPyPI公開前に修正が必要です",
    "❌ Version mismatch: ": "❌ バージョンの不一致: ",
    "🎉 Project is ready for PyPI publication!": "🎉 プロジェクトはPyPI公開の準備ができました！",
    "👤 Author: ": "👤 作成者: ",
    "📁 Project root: ": "📁 プロジェクトルート: ",
    "📋 pyproject.toml version: ": "📋 pyproject.tomlバージョン: ",
    "📦 Package version: ": "📦 パッケージバージョン: ",
    "📦 Version: ": "📦 バージョン: ",
    "🔍 SuperClaude PyPI Readiness Validation": "🔍 SuperClaude PyPI準備完了検証",
    "🔧 Setup version: ": "🔧 セットアップバージョン: "
  },
  "./SuperClaude/__main__.py": {
    "\nExamples:\n  SuperClaude install --dry-run\n  SuperClaude update --verbose\n  SuperClaude backup --create\n        ": "\n例:\n  SuperClaude install --dry-run\n  SuperClaude update --verbose\n  SuperClaude backup --create\n        ",
    "\nSuperClaude Framework Management Hub\nUnified entry point for all SuperClaude operations\n\nUsage:\n    SuperClaude install [options]\n    SuperClaude update [options]\n    SuperClaude uninstall [options]\n    SuperClaude backup [options]\n    SuperClaude --help\n": "\nSuperClaude フレームワーク管理ハブ\nすべてのSuperClaude操作の統一エントリポイント\n\n使用法:\n    SuperClaude install [options]\n    SuperClaude update [options]\n    SuperClaude uninstall [options]\n    SuperClaude backup [options]\n    SuperClaude --help\n",
    "\n🔄 SuperClaude was updated. Please restart to use the new version.": "\n🔄 SuperClaudeが更新されました。新しいバージョンを使用するには再起動してください。",
    " (legacy fallback)": " (レガシーフォールバック)",
    "' failed to load: ": "' の読み込みに失敗しました: ",
    "' missing, using legacy fallback": "' が見つからないため、レガシーフォールバックを使用します",
    "Arguments: ": "引数: ",
    "Automatically answer yes to all prompts": "すべてのプロンプトに自動的に「はい」と答える",
    "Automatically install updates without prompting": "プロンプトなしで更新を自動的にインストールする",
    "Available operations:": "利用可能な操作:",
    "Backup and restore operations": "バックアップと復元操作",
    "Create shared parser for global flags used by all commands": "すべてのコマンドで使用されるグローバルフラグの共有パーサーを作成",
    "Create the main CLI parser and attach subcommand parsers": "メインCLIパーサーを作成し、サブコマンドパーサーをアタッチ",
    "Did you mean: ": "もしかして: ",
    "Enable verbose logging": "詳細ロギングを有効にする",
    "Executing operation: ": "操作を実行中: ",
    "Falling back to legacy script for '": "' のレガシースクリプトにフォールバックしています",
    "Force execution, skipping checks": "チェックをスキップして実行を強制",
    "Framework operations to perform": "実行するフレームワーク操作",
    "Install SuperClaude framework components": "SuperClaudeフレームワークコンポーネントをインストール",
    "Legacy execution failed: ": "レガシー実行に失敗しました: ",
    "Main entry point": "メインエントリポイント",
    "Module '": "モジュール '",
    "Module for '": "' のモジュール",
    "No module or legacy script found for operation '": "操作 ' にモジュールまたはレガシースクリプトが見つかりません",
    "Operation cancelled by user": "ユーザーによって操作がキャンセルされました",
    "Register subcommand parsers and map operation names to their run functions": "サブコマンドパーサーを登録し、操作名をその実行関数にマッピング",
    "Remove SuperClaude installation": "SuperClaudeのインストールを削除",
    "Return supported operations and their descriptions": "サポートされている操作とその説明を返す",
    "Run a legacy operation script if module is unavailable": "モジュールが利用できない場合にレガシー操作スクリプトを実行",
    "Set up logging and shared runtime environment based on args": "引数に基づいてロギングと共有ランタイム環境を設定",
    "Simulate operation without making changes": "変更を加えずに操作をシミュレート",
    "Skip checking for updates": "更新の確認をスキップ",
    "SuperClaude ": "SuperClaude ",
    "SuperClaude Framework Management Hub - Unified CLI": "SuperClaude フレームワーク管理ハブ - 統一CLI",
    "SuperClaude Framework v": "SuperClaude フレームワーク v",
    "SuperClaude called with operation: ": "SuperClaudeが操作で呼び出されました: ",
    "Suppress all output except errors": "エラー以外のすべての出力を抑制",
    "Target installation directory (default: ": "ターゲットインストールディレクトリ (デフォルト: ",
    "Try to dynamically import an operation module": "操作モジュールを動的にインポートしようとします",
    "Unhandled error: ": "未処理のエラー: ",
    "Unified CLI for all operations": "すべての操作のための統一CLI",
    "Unknown operation: '": "不明な操作: '",
    "Update existing SuperClaude installation": "既存のSuperClaudeインストールを更新",
    "Use legacy script": "レガシースクリプトを使用",
    "Warning: Setup directory not found at ": "警告: セットアップディレクトリが見つかりません: "
  },
  "./bin/update.js": {
    "   Or:  pip install --upgrade --user SuperClaude": "   または:  pip install --upgrade --user SuperClaude",
    "   Please install SuperClaude first using:": "   最初にSuperClaudeをインストールしてください:",
    "   Please run it manually:": "   手動で実行してください:",
    "   SuperClaude update": "   SuperClaude update",
    "   Try: pipx upgrade SuperClaude": "   試してみてください: pipx upgrade SuperClaude",
    "   Your system requires pipx or --user flag for pip operations.": "   お使いのシステムでは、pip操作にpipxまたは--userフラグが必要です。",
    "   or": "   または",
    "   pip install SuperClaude": "   pip install SuperClaude",
    "   pipx install SuperClaude": "   pipx install SuperClaude",
    "✅ Detected pip installation with --user flag": "✅ --userフラグ付きのpipインストールを検出しました",
    "✅ Detected pipx installation": "✅ pipxインストールを検出しました",
    "✅ Detected standard pip installation": "✅ 標準のpipインストールを検出しました",
    "✅ SuperClaude updated successfully!": "✅ SuperClaudeは正常に更新されました！",
    "❌ Neither pipx nor pip found, cannot update.": "❌ pipxもpipも見つかりません、更新できません。",
    "❌ Update failed.": "❌ 更新に失敗しました。",
    "🔄 Checking for SuperClaude updates...": "🔄 SuperClaudeの更新を確認中...",
    "🔄 Updating SuperClaude from PyPI...": "🔄 PyPIからSuperClaudeを更新中..."
  },
  "./bin/cli.js": {
    "❌ Python 3 is required but not found.": "❌ Python 3が必要ですが、見つかりません。"
  }
}
